/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package main

import . "unsafe"
import reflect "reflect"
import runtime "runtime"


import . "util"
import . "gdt"
import . "interrupt"
import . "콘솔"
import . "작업관리자"
import . "tasking/tss"
import . "tasking/thread"
import . "tasking/scheduler"
import . "tasking/process"

import . "drivers/드라이버"
import . "drivers/키보드"
import . "drivers/마우스"
import . "drivers/ata"

import . "filesystem/msdospart"
import . "filesystem/fat"
import . "filesystem/elf"

import . "systemcall"

import . "memorymanager"
//import . "vga"		// 그래픽모드는 여기를 활성화
//import . "widget"		// 그래픽모드는 여기를 활성화

import . "pci"
import . "amd_am79c973"
import . "net/etherframe"	// etherframe = 이더넷프레임 = 이더넷프레임
import . "net/arp" 		// AddressResolutionProtocol = ARP = 주소결정규약
import . "net/ipv4"		// InternetProtocol = 인터넷규약 = 인터넷규약
import . "net/icmp" 		// InternetControlMessageProtocol = ICMP = 인터넷제어메시지규약
import . "net/udp" 		// UserDatagramProtocol = UDP = 사용자데이터그램프로토콜
import . "net/tcp" 		// TransmissionControlProtocol = TCP = 전송제어프로토콜
//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
type T나의_키보드이벤트처리기 struct {
}

var 키보드콘솔 T콘솔 = T콘솔{}
func (자신 *T나의_키보드이벤트처리기) M키누른동시(값 byte){
        임시 := []byte(" ")
        임시[0] = 값

        키보드콘솔.M출력(임시)

}
func (자신 *T나의_키보드이벤트처리기) M키떼는동시(값 byte){
}


//////////////////////////////////////////////////////////////////////////////////////////////
type T나의_마우스이벤트처리기 struct{
}
var 마우스콘솔 T콘솔 = T콘솔{}
var x이전위치 int16 = 0
var y이전위치 int16 = 0
var x위치 int16 = 0
var y위치 int16 = 0

func (자신 *T나의_마우스이벤트처리기) M마우스누른동시(버튼 int8) {
        임시 := []byte("x")
        마우스콘솔.M출력XY(임시, uint16(x이전위치), uint16(y이전위치))
}
func (자신 *T나의_마우스이벤트처리기) M마우스떼는동시(버튼 int8) { }
func (자신 *T나의_마우스이벤트처리기) M마우스움직인동시(x int8, y int8) {

        x위치 += int16(x)
        if x위치 < 0 { x위치=0 }
        if x위치 >= 80 { x위치 = 79 }

        y위치 -= int16(y)

        if y위치 < 0 { y위치 = 0 }
        if y위치 >= 25 { y위치 = 24 }

        임시 := []byte(" ")
        마우스콘솔.M출력XY(임시, uint16(x이전위치), uint16(y이전위치))

        임시 = []byte("+")
        마우스콘솔.M출력XY(임시, uint16(x위치), uint16(y위치))

        x이전위치 = x위치
        y이전위치 = y위치
}

//////////////////////////////////////////////////////////////////////////////////////////////
var 작업콘솔 T콘솔 = T콘솔{}
func T함수1(){
	임시 := []byte("F")
	for ; ; {
		//작업콘솔.M출력(임시)
		M시스템_출력(임시)
	}
}
func taskA(){
	임시 := []byte("T")
	for ; ; {
		//작업콘솔.M출력(임시)
		M시스템_출력(임시)
	}
}
var str []byte = ([]byte)("print string")
func 문자열받기() uint32{
	var b uint32 = uint32(uintptr(Pointer(&str)))
	return b
}
func 문자열출력(p_str uint32){
	var str []byte = *(*[]byte)(Pointer(uintptr(p_str)))
	for i:=uint32(0); i<1000000; i++{
		M시스템_출력XY(str, 20, 21)
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////
func 작업A(){
	임시 := []byte("A")
	for ; ; {
		//작업콘솔.M출력(임시)
		M시스템_출력(임시)
	}
}
func 작업B(){
	임시 := []byte("B")
	for ; ; {
		//작업콘솔.M출력XY(임시, uint16(i), 1)
		M시스템_출력(임시)
	}
}
func 작업C(){
	임시 := []byte("C")
	for ; ; {
		//작업콘솔.M출력XY(임시, uint16(i), 1)
		M시스템_출력(임시)
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////
var 네트워크장치_서술자 T주변부품연결장치_서술자
var i주변부품연결컨트롤러_처리기 I주변부품연결컨트롤러_처리기
type T나의주변부품연결컨트롤러_처리기 struct{
	T기본주변부품연결컨트롤러_처리기
}
var 주변부품콘솔 T콘솔 = T콘솔{}
func (self T나의주변부품연결컨트롤러_처리기) M드라이버_갖는동시(주변부품연결장치_서술자 T주변부품연결장치_서술자) {
        if 주변부품연결장치_서술자.P벤더_아이디==0x1022 && 주변부품연결장치_서술자.P디바이스_아이디==0x2000 {	// AMD am79c973
                네트워크장치_서술자 = 주변부품연결장치_서술자
        }
}
func (self T나의주변부품연결컨트롤러_처리기) M드라이버_갖기() T주변부품연결장치_서술자{
        return 네트워크장치_서술자
}

//////////////////////////////////////////////////////////////////////////////////////////////
var 넷콘솔 = T콘솔{}
type T나의_클라이언트_전송제어프로토콜_처리기 struct{
	T클라이언트_전송제어프로토콜_처리기
}
func (자신 *T나의_클라이언트_전송제어프로토콜_처리기)M연결성립_동시(소켓 *T전송제어프로토콜_소켓){

	for i:=0; i<10; i++ {
		소켓.M보내기(([]byte)("Hello!! TCP"), 11) 
	}
	소켓.M연결끊기()
}
func (자신 *T나의_클라이언트_전송제어프로토콜_처리기)M자료받은동시(자료 []byte, 크기 uint32){
}

type T웹서버_전송제어프로토콜_처리기 struct{
	T서버_전송제어프로토콜_처리기
}
func (자신 *T웹서버_전송제어프로토콜_처리기)M연결성립_동시(소켓 *T전송제어프로토콜_소켓){


	var 하이퍼텍스트 = "HTTP/1.1 200 OK\r\nServer: MyWebServer\r\nContent-Type: text/html\r\n\r\n<html><head><title>hi</title><body>NOH에 의해 만들어진 웹서버 입니다.</body></html>"
	var 하이퍼텍스트전송프로토콜 = *(*[]byte)(Pointer(&하이퍼텍스트))
	소켓.M보내기(하이퍼텍스트전송프로토콜, uint16(len(하이퍼텍스트전송프로토콜)))

	하이퍼텍스트 = "안녕!! TCP "
	하이퍼텍스트전송프로토콜 = *(*[]byte)(Pointer(&하이퍼텍스트))
	for i:=0; i<1000; i++ {
		소켓.M보내기(하이퍼텍스트전송프로토콜, uint16(len(하이퍼텍스트전송프로토콜)))
	}
	소켓.M연결끊기()
}

//////////////////////////////////////////////////////////////////////////////////////////////
func Elf파일_적재(){
	var ata0s = T고급기술결합{}
       	ata0s.M초기화(false, 0x1F0)
        ata0s.Identify()

        파티션 := TMSDOS파티션테이블{}
        파티션.M파티션들_읽기(&ata0s)

        bios := T바이오스_파라미터_블록32{}


	var 파일이름 [] byte = ([]byte)("TEST")
	var 크기 uint32 = bios.Len(&ata0s, 파티션.MBR.PrimaryPartition[0], 파일이름)
	var 자료버퍼 [10*1024]byte
	var 자료 []byte = 자료버퍼[:]
        bios.Read(&ata0s, 파티션.MBR.PrimaryPartition[0], 파일이름, 자료)

	var 함수map  = map[string] uintptr{
		runtime.FuncForPC(reflect.ValueOf(T함수1).Pointer()).Name(): reflect.ValueOf(T함수1).Pointer(),
		runtime.FuncForPC(reflect.ValueOf(문자열받기).Pointer()).Name(): reflect.ValueOf(문자열받기).Pointer(),
		runtime.FuncForPC(reflect.ValueOf(문자열출력).Pointer()).Name(): reflect.ValueOf(문자열출력).Pointer(),
		"실행코드_주소": reflect.ValueOf(&실행코드).Pointer(),
	}

	elf := Elf{}
	elf.Parse(자료[:크기], 함수map, &실행코드)

}

var 실행코드[4096]uint8=[4096]uint8{}
var 실행코드_주소 uintptr = uintptr(Pointer(&실행코드))
var 실행코드_포인터 uintptr = uintptr(Pointer(&실행코드_주소))
//////////////////////////////////////////////////////////////////////////////////////////////
func main(){
	K핵심()
}
func getESP() uint32

func K핵심(){

	공용서술자표 := &T공용서술자표{}
	공용서술자표.M초기화()

	메모리_관리자 := &T메모리_관리자{}
	var 힙 uint32 = 32*1024*1024 // 1mb
	메모리_관리자.M초기화(0, 16*1024*1024)
	var 할당됨 uint32
	할당됨 = uint32(uintptr(메모리_관리자.Malloc(1024*1024)))
	콘솔 := T콘솔{}
	임시 := []byte("heap:")
	콘솔.M출력XY(임시, 5, 9)
	콘솔.MUint32출력XY(힙, 10, 9)
	콘솔.MUint32출력XY(할당됨, 10, 10)



	할당됨 = uint32(uintptr(메모리_관리자.Malloc(1024)))
	콘솔.MUint32출력XY(할당됨, 10, 15)



	esp := getESP()
	콘솔.M출력XY(esp, 10, 5)
	tss := TSSEntry{}
	tss.Install(공용서술자표, 5, SEG_KERNEL_DATA, esp)

	/*	
	작업a := T작업{}
	작업a.M초기화(공용서술자표, 메모리_관리자, 작업A)
	작업b := T작업{}
	작업b.M초기화(공용서술자표, 메모리_관리자, 작업B)
	작업c := T작업{}
	작업c.M초기화(공용서술자표, 메모리_관리자, 작업C)
	*/


	작업관리자 := &T작업관리자{}
	작업관리자.M초기화()

	/*
	작업관리자.M작업추가(작업a)
	작업관리자.M작업추가(작업b)
	작업관리자.M작업추가(작업c)
	*/



	인터럽트_관리자 := &T인터럽트_관리자{}
	인터럽트_관리자.M초기화(0x20, 공용서술자표, 작업관리자)


	시스템호출 := &T시스템호출{}
	시스템호출.M초기화(인터럽트_관리자)

	Elf파일_적재()

	쓰레드_헬퍼 := &T쓰레드_헬퍼{}
	쓰레드_헬퍼.M초기화(메모리_관리자)

	프로세스_헬퍼 := T프로세스_헬퍼{}
	프로세스_헬퍼.M초기화(메모리_관리자)

	프로세스1 := 프로세스_헬퍼.M생성(작업A, 쓰레드_헬퍼, true)
	쓰레드1 := *(*T쓰레드)(프로세스1.P쓰레드들.GetAt(0))

	var 함수 = *(*func())(Pointer(&실행코드_포인터))
	프로세스2 := 프로세스_헬퍼.M생성(함수, 쓰레드_헬퍼, true)
	쓰레드2 := *(*T쓰레드)(프로세스2.P쓰레드들.GetAt(0))

	프로세스3 := 프로세스_헬퍼.M생성(작업B, 쓰레드_헬퍼, true)
	쓰레드3 := *(*T쓰레드)(프로세스3.P쓰레드들.GetAt(0))


	스케쥴러 := T스케줄러{}
	스케쥴러.M초기화(인터럽트_관리자, 메모리_관리자, tss)

	스케쥴러.M쓰레드_추가(&쓰레드1)
	스케쥴러.M쓰레드_추가(&쓰레드2)
	스케쥴러.M쓰레드_추가(&쓰레드3)

	스케쥴러.M활성화됨(true)




	키보드 := &T키보드드라이버{}
	키보드이벤트처리기 := &T나의_키보드이벤트처리기{}
	키보드.M초기화(인터럽트_관리자, 키보드이벤트처리기)


	마우스:= &T마우스드라이버{}
	마우스이벤트처리기 := &T나의_마우스이벤트처리기{}
	마우스.M초기화(인터럽트_관리자, 마우스이벤트처리기)



        드라이버관리자 := T드라이버관리자{} //DriverManager
        드라이버관리자.M초기화()


        주변부품연결컨트롤러 := &T주변부품연결컨트롤러{} // PCI
        나의주변부품연결컨트롤러_처리기:= T나의주변부품연결컨트롤러_처리기{}
        주변부품연결컨트롤러.M초기화(나의주변부품연결컨트롤러_처리기)
        주변부품연결컨트롤러.M드라이버들선택(&드라이버관리자, 인터럽트_관리자)
        네트워크장치_서술자 = 나의주변부품연결컨트롤러_처리기.M드라이버_갖기()

	아이피주소_역순 := uint64(Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 51})))
        게이트웨이_역순:= Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 2}))
        서브넷마스크_역순 := Uint32_R(ArrayToUint32([4]byte{255, 255, 255, 0}))
        원격주소_역순 := Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 131}))
	var 클라이언트_포트번호 = uint16(1234)
	var 서버_포트번호 = uint16(80)

	넷카드 := Tamd_am79c973{}

        이더넷프레임_제공자 := T이더넷프레임_제공자{} // TEtherFrameProvider
        이더넷프레임_제공자.M초기화(넷카드)


        넷카드.M드라이버_초기화(인터럽트_관리자, 네트워크장치_서술자, &이더넷프레임_제공자)
        넷카드.M아이피주소_설정(아이피주소_역순)
        넷카드.M활성화()


        주소결정규약_제공자 := T주소결정규약_제공자{}				// arp
        주소결정규약_제공자.M초기화(이더넷프레임_제공자)
        주소결정규약_제공자.M맥주소_방송(게이트웨이_역순)


        인터넷규약_제공자 := T인터넷규약_제공자{}
        인터넷규약_제공자.M초기화(이더넷프레임_제공자)
	인터넷규약_제공자.M주소설정(주소결정규약_제공자, 게이트웨이_역순, 서브넷마스크_역순)

        인터넷제어메시지규약 := T인터넷제어메시지규약{} // Internet Control Message Protocol = ICMP
        인터넷제어메시지규약.M초기화(인터넷규약_제공자)
	인터넷제어메시지규약.M반향응답_요청하기(게이트웨이_역순)


        var 사용자데이터그램프로토콜_제공자 = T사용자데이터그램프로토콜_제공자{}
        사용자데이터그램프로토콜_제공자.M초기화(인터넷규약_제공자)

        var 사용자데이터그램프로토콜_소켓 = *사용자데이터그램프로토콜_제공자.M연결하기(원격주소_역순, 클라이언트_포트번호) // udp sockect
        사용자데이터그램프로토콜_소켓.M초기화(사용자데이터그램프로토콜_제공자)

	var 사용자데이터그램프로토콜_처리기 = T사용자데이터그램프로토콜_처리기{}
	사용자데이터그램프로토콜_처리기.M초기화(인터넷규약_제공자)

	/*---------------- 사용자데이터그램프로토콜(UDP)는 여기를 활성화 ----------------------
        사용자데이터그램프로토콜_소켓.M보내기(([]byte)("abcde"),5)
        for {
                사용자데이터그램프로토콜_소켓.M보내기(([]byte)("abcde"),5)
        }
	--------------------------------------------------------------------------------*/

	/*--------------------- 그래픽 모드는 여기를 활성화 -----------------------------
	그래픽 := &T비디오그래픽배열{}
	그래픽.M모드_설정(320, 200, 8)
	그래픽.M사각형채우기(0, 0, 320, 200, 0x00, 0x00, 0x00) // 검정색 채우기

	위젯 := T위젯{}
	위젯.M초기화(nil, 0, 0, 20, 20, 0x00, 0x00, 0xA8) // 파란색 상자

	위젯마우스사건처리기 := &T위젯마우스사건처리기{}
	위젯마우스사건처리기.M초기화(위젯, *그래픽)
	마우스.M초기화(인터럽트_관리자, 위젯마우스사건처리기)
	-------------------------------------------------------------------------------*/


	var 전송제어프로토콜_제공자 = T전송제어프로토콜_제공자{}		// tcp = TransmissionControlProtocol
	var 나의_클라이언트_전송제어프로토콜_처리기 = T나의_클라이언트_전송제어프로토콜_처리기{}
	전송제어프로토콜_제공자.M초기화(인터넷규약_제공자, &나의_클라이언트_전송제어프로토콜_처리기)

	전송제어프로토콜_제공자.M연결하기(원격주소_역순, 클라이언트_포트번호)

	인터럽트_관리자.M활성화()
	
	for i:=0; i<100000; i++{
		var 전송제어프로토콜_소켓 = 전송제어프로토콜_제공자.M수신대기(서버_포트번호)	// tcp listen
		var 웹서버_전송제어프로토콜_처리기 = T웹서버_전송제어프로토콜_처리기{}
		전송제어프로토콜_제공자.M바인드(전송제어프로토콜_소켓, &웹서버_전송제어프로토콜_처리기)
	}


	for {
		멈추기()
	}
	
}
func 멈추기()
