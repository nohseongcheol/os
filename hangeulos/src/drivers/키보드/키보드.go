/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package 키보드

import . "unsafe"

import . "port"
import . "interrupt"
import . "콘솔"

type I키보드이벤트처리기 interface{
	M키누른동시(값 byte)
	M키떼는동시(값 byte)
}
var i키보드이벤트처리기 I키보드이벤트처리기

type T키보드이벤트처리기 struct {
}
type T기본키보드이벤트처리기 struct{
}

func (자신 *T기본키보드이벤트처리기) M키누른동시(값 byte){
        _16진수 := [16] byte{'0', '1', '2', '3',
                        '4', '5', '6', '7',
                        '8', '9', 'A', 'B',
                        'C', 'D', 'E', 'F'}

	임시문자열 := []byte("\n\n\n\n\n\nkeyboard :    ")
        임시문자열[17] = _16진수[((값 >>4)  & 0xF)]
        임시문자열[18] = _16진수[값 & 0xF]

	콘솔 := new(T콘솔)

        콘솔.M출력(임시문자열)


}
func (자신 *T기본키보드이벤트처리기) M키떼는동시(값 byte){
}

type T키보드드라이버 struct{
	*T인터럽트_처리기
}
var 함수포인터 func(*T키보드드라이버, uint32) uint32

var 데이터포트 T바이트포트
var 명령어포트 T바이트포트

func (자신 *T키보드드라이버) M초기화(인터럽트_관리자  *T인터럽트_관리자, 키보드이벤트처리기 I키보드이벤트처리기) {

	데이터포트.M초기화(0x60)
	명령어포트.M초기화(0x64)

	i키보드이벤트처리기 = &T기본키보드이벤트처리기{}
	if 키보드이벤트처리기 != nil {
		i키보드이벤트처리기 = 키보드이벤트처리기
	}
	
	함수포인터 = (*T키보드드라이버).M인터럽트처리
	var 주소 uintptr
	주소 = uintptr(Pointer(&함수포인터))


	자신.T인터럽트_처리기.M초기화(0x21, uintptr(Pointer(인터럽트_관리자)), 주소)

	for(명령어포트.M읽기() & 0x01) != 0 {
		데이터포트.M읽기()
	}


	명령어포트.M쓰기(0xAE)
	명령어포트.M쓰기(0x20)

	명령어포트.M쓰기(0x60)

	var 상태 uint8
	상태 = uint8(데이터포트.M읽기()) | 1 & (^0x10)
	데이터포트.M쓰기(상태)

	데이터포트.M쓰기(0xF4) 

}
func (자신 *T키보드드라이버) M인터럽트처리(확장스택포인터 uint32) uint32{


	자판값 := 데이터포트.M읽기()

        if 자판값 < 0x80 {

                switch 자판값 {
                        case 0x02: i키보드이벤트처리기.M키누른동시('1')
                        case 0x03: i키보드이벤트처리기.M키누른동시('2')
                        case 0x04: i키보드이벤트처리기.M키누른동시('3')
                        case 0x05: i키보드이벤트처리기.M키누른동시('4')
                        case 0x06: i키보드이벤트처리기.M키누른동시('5')
                        case 0x07: i키보드이벤트처리기.M키누른동시('6')
                        case 0x08: i키보드이벤트처리기.M키누른동시('7')
                        case 0x09: i키보드이벤트처리기.M키누른동시('8')
                        case 0x0A: i키보드이벤트처리기.M키누른동시('9')
                        case 0x0B: i키보드이벤트처리기.M키누른동시('0')

                        case 0x10: i키보드이벤트처리기.M키누른동시('q')
                        case 0x11: i키보드이벤트처리기.M키누른동시('w')
                        case 0x12: i키보드이벤트처리기.M키누른동시('e')
                        case 0x13: i키보드이벤트처리기.M키누른동시('r')
                        case 0x14: i키보드이벤트처리기.M키누른동시('t')
                        case 0x15: i키보드이벤트처리기.M키누른동시('y')
                        case 0x16: i키보드이벤트처리기.M키누른동시('u')
                        case 0x17: i키보드이벤트처리기.M키누른동시('i')
                        case 0x18: i키보드이벤트처리기.M키누른동시('o')
                        case 0x19: i키보드이벤트처리기.M키누른동시('p')

                        case 0x1E: i키보드이벤트처리기.M키누른동시('a')
                        case 0x1F: i키보드이벤트처리기.M키누른동시('s')
                        case 0x20: i키보드이벤트처리기.M키누른동시('d')
                        case 0x21: i키보드이벤트처리기.M키누른동시('f')
                        case 0x22: i키보드이벤트처리기.M키누른동시('g')
                        case 0x23: i키보드이벤트처리기.M키누른동시('h')
                        case 0x24: i키보드이벤트처리기.M키누른동시('j')
                        case 0x25: i키보드이벤트처리기.M키누른동시('k')
                        case 0x26: i키보드이벤트처리기.M키누른동시('l')

                        case 0x2C: i키보드이벤트처리기.M키누른동시('y')
                        case 0x2D: i키보드이벤트처리기.M키누른동시('x')
                        case 0x2E: i키보드이벤트처리기.M키누른동시('c')
                        case 0x2F: i키보드이벤트처리기.M키누른동시('v')
                        case 0x30: i키보드이벤트처리기.M키누른동시('b')
                        case 0x31: i키보드이벤트처리기.M키누른동시('n')
                        case 0x32: i키보드이벤트처리기.M키누른동시('m')
                        case 0x33: i키보드이벤트처리기.M키누른동시(',')
                        case 0x34: i키보드이벤트처리기.M키누른동시('.')
                        case 0x35: i키보드이벤트처리기.M키누른동시('-')

                      	case 0x1C: i키보드이벤트처리기.M키누른동시('\n')
                        case 0x39: i키보드이벤트처리기.M키누른동시(' ')

                        case 0xFA:
                        case 0x45:
                        case 0xC5:

                        default: i키보드이벤트처리기.M키누른동시(' ')
                }

        }


	return 확장스택포인터

}

