/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package etherframe

import . "콘솔"
//import . "memorymanager"
import . "amd_am79c973"
import . "unsafe"
import . "util"


var 콘솔 T콘솔 = T콘솔{}
/////////////////////////////////////////////////////////////////////////////
//
//	신호통신형태 = 이더넷프레임 = EthernetFrame
//	매체접근제어 = Media Access Control = MAC
//	물리주소 = 맥주소= MAC address
//
/////////////////////////////////////////////////////////////////////////////
type T이더넷프레임_머리말_임시저장공간 struct{
	목적지_맥주소_역순 [6]byte
	출발지_맥주소_역순 [6]byte
	이더넷유형_역순 [2]byte
}
var 이더넷프레임_머리말_크기 uint32 = 14
/////////////////////////////////////////////////////////////////////////////
type T이더넷프레임_머리말 struct{
	목적지_맥주소_역순 uint64
	출발지_맥주소_역순 uint64
	이더넷유형_역순 uint16
}
func (자신 *T이더넷프레임_머리말) M초기화(임시저장공간 *T이더넷프레임_머리말_임시저장공간) {
	자신.목적지_맥주소_역순 = (ArrayToUint48(임시저장공간.목적지_맥주소_역순))
	자신.출발지_맥주소_역순 = (ArrayToUint48(임시저장공간.출발지_맥주소_역순))
        자신.이더넷유형_역순 = (ArrayToUint16(임시저장공간.이더넷유형_역순))
}
func (자신 *T이더넷프레임_머리말) M버퍼설정(임시저장공간 *T이더넷프레임_머리말_임시저장공간){
	임시저장공간.목적지_맥주소_역순 = Uint48ToArray(Uint48_R(자신.목적지_맥주소_역순))
	임시저장공간.출발지_맥주소_역순 = Uint48ToArray(Uint48_R(자신.출발지_맥주소_역순))
	임시저장공간.이더넷유형_역순 = Uint16ToArray(Uint16_R(자신.이더넷유형_역순))
}
/////////////////////////////////////////////////////////////////////////////
type I이더넷프레임_처리기 interface{
	M이더넷프레임_받는동시(데이터저장공간_주소 uintptr, 크기 uint32) bool
	M이더넷프레임_보내기(목적지_맥주소_역순 uint64, 이더넷유형_역순 uint16, 데이터저장공간_주소 uintptr, 크기 uint32)
}

/////////////////////////////////////////////////////////////////////////////
type T이더넷프레임_처리기_자료 struct{
	이더넷프레임_머리말 T이더넷프레임_머리말
	후단부 T이더넷프레임_제공자
}
var 처리기_자료 T이더넷프레임_처리기_자료
type T이더넷프레임_처리기 struct{
}
func (자신 *T이더넷프레임_처리기)M초기화(p_후단부 T이더넷프레임_제공자){
	처리기_자료.후단부 = p_후단부
}
func (자신 *T이더넷프레임_처리기) M처리기설정(처리기 I이더넷프레임_처리기, p_etherType uint16){
	자료.이더넷프레임_처리기들[p_etherType] = 처리기
}
func (자신 *T이더넷프레임_처리기)M이더넷프레임_받는동시(데이터저장공간_주소 uintptr, 크기 int) bool{
	콘솔.M출력(([]byte)("OnEtherFrameReceived"))
	return false
}
func (자신 *T이더넷프레임_처리기)M이더넷프레임_보내기(목적지_맥주소_역순 uint64, 이더넷유형_역순 uint16, 데이터저장공간_주소 uintptr, 크기 uint32) {
	처리기_자료.후단부.M이더넷프레임_보내기(목적지_맥주소_역순, 이더넷유형_역순, 데이터저장공간_주소, 크기)	
}
func (자신 *T이더넷프레임_처리기)M맥주소_갖기() uint64{
	return 처리기_자료.후단부.M맥주소_갖기()
}
func (자신 *T이더넷프레임_처리기)M아이피주소_갖기() uint64{
	return 처리기_자료.후단부.M아이피주소_갖기()
}
/////////////////////////////////////////////////////////////////////////////
type 이더넷프레임_제공자_자료 struct{
	넷카드 Tamd_am79c973
	이더넷프레임_처리기들 [65565]I이더넷프레임_처리기
}
var 자료 이더넷프레임_제공자_자료

type T이더넷프레임_제공자 struct{
}
func (자신 *T이더넷프레임_제공자)M초기화(후단부 Tamd_am79c973) {
	자료.넷카드 = 후단부
	for i:=0; i<65535; i++ {
		자료.이더넷프레임_처리기들[i] = nil
	}
}
func (자신 *T이더넷프레임_제공자)M원시자료_받는동시(데이터저장공간_주소 uintptr, 크기 uint32) bool{

	var 임시저장공간 *T이더넷프레임_머리말_임시저장공간 = (*T이더넷프레임_머리말_임시저장공간)(Pointer(데이터저장공간_주소))
	var 이더넷프레임_머리말 T이더넷프레임_머리말 = T이더넷프레임_머리말{}
	이더넷프레임_머리말.M초기화(임시저장공간)
	var sendBack bool = false


	if  이더넷프레임_머리말.목적지_맥주소_역순 == 0x0000FFFFFFFFFFFF  || Uint48_R(이더넷프레임_머리말.목적지_맥주소_역순) == 자신.M맥주소_갖기() {
		if 자료.이더넷프레임_처리기들[이더넷프레임_머리말.이더넷유형_역순] != nil {
			var 주소 uintptr = uintptr(Pointer(데이터저장공간_주소)) + uintptr(이더넷프레임_머리말_크기)	
			sendBack = 자료.이더넷프레임_처리기들[이더넷프레임_머리말.이더넷유형_역순].M이더넷프레임_받는동시(주소, 크기 - 이더넷프레임_머리말_크기)
		}
	}

	if sendBack {
		이더넷프레임_머리말.목적지_맥주소_역순 = 이더넷프레임_머리말.출발지_맥주소_역순
		이더넷프레임_머리말.출발지_맥주소_역순 = Uint48_R(자신.M맥주소_갖기())
		이더넷프레임_머리말.M버퍼설정(임시저장공간)
	}

	return sendBack
}
func (자신 *T이더넷프레임_제공자)M보내기(데이터저장공간_주소 uintptr, 크기 uint32){
	자료.넷카드.M보내기(데이터저장공간_주소, 크기)	
}
func (자신 *T이더넷프레임_제공자)M이더넷프레임_보내기(목적지_맥주소_역순 uint64, 이더넷유형_역순 uint16, 데이터저장공간_주소 uintptr, 크기 uint32){

	var 임시저장공간2 [4096]byte 
	var 임시저장공간 *T이더넷프레임_머리말_임시저장공간 = (*T이더넷프레임_머리말_임시저장공간)(Pointer(&임시저장공간2))

	var 이더넷프레임_머리말 T이더넷프레임_머리말 = T이더넷프레임_머리말{}
	이더넷프레임_머리말.M초기화(임시저장공간)

	이더넷프레임_머리말.목적지_맥주소_역순 = Uint48_R(목적지_맥주소_역순)
	이더넷프레임_머리말.출발지_맥주소_역순 = Uint48_R(자료.넷카드.M맥주소_갖기())
	이더넷프레임_머리말.이더넷유형_역순 = Uint16_R(이더넷유형_역순)

	이더넷프레임_머리말.M버퍼설정(임시저장공간)
	var 원문버퍼 [4096] byte = *(*([4096]byte))(Pointer(데이터저장공간_주소))

	var i uint32 = 0
	for i=0; i<크기; i++ {
		임시저장공간2[uint32(이더넷프레임_머리말_크기)+i] = 원문버퍼[i]
	}

	var 주소 uintptr = uintptr(Pointer(&임시저장공간2))
	자료.넷카드.M보내기(주소, 크기+uint32(이더넷프레임_머리말_크기))
	
}
func (자신 *T이더넷프레임_제공자)M맥주소_갖기() uint64{
	return 자료.넷카드.M맥주소_갖기()
}
func (자신 *T이더넷프레임_제공자)M아이피주소_갖기() uint64{
	return 자료.넷카드.M아이피주소_갖기()
}
