package main

import . "util"
import . "unsafe"

import . "gdt"
import . "interrupt"
import . "console"
import . "taskmanager"
import . "drivers/drivermanager"
import . "drivers/keyboard"
import . "drivers/mouse"

import . "memorymanager"

//import . "vga"		// グラフィックモードはここを活性化
//import . "widget"		// グラフィックモードはここを活性化

import . "pci"
import . "amd_am79c973"
import . "net/etherframe"	// etherframe = イーサネットフレーム
import . "net/arp" 		// AddressResolutionProtocol = ARP = アドレス解決プロトコル
import . "net/ipv4"		// InternetProtocol = インターネットプロトコル
import . "net/icmp" 		// InternetControlMessageProtocol = ICMP = インターネット制御通知プロトコル
import . "net/udp" 		// UserDatagramProtocol = UDP = ユーザデータグラムプロトコル
import . "net/tcp" 		// TansmissionControlProtocol= TCP = 伝送制御プロトコル

////////////////////////////////////////////////////////////////////////////////////////////
type T私のキーボード事件處理器 struct {
}

var キーボード端末機 T端末機 = T端末機{}
func (自身 *T私のキーボード事件處理器) Mキーが押し下げられた時(値 byte){
        臨時 := []byte(" ")
        臨時[0] = 値

        キーボード端末機.M出力(臨時)

}
func (自身 *T私のキーボード事件處理器) Mキーを離された時(値 byte){
}



////////////////////////////////////////////////////////////////////////////////////////////
type T私のマウス事件處理器 struct{
}
var マウス端末機 T端末機 = T端末機{}
var x以前位置 int = 0
var y以前位置 int = 0
var x位置 int = 0
var y位置 int = 0

func (自身 *T私のマウス事件處理器) Mマウス押し同時(ボタン int8) {
        臨時 := "x"
        マウス端末機.M出力(臨時, x以前位置, y以前位置)
}
func (自身 *T私のマウス事件處理器) Mマウス離し同時(ボタン int8) { }
func (自身 *T私のマウス事件處理器) Mマウス動かし同時(x int8, y int8) {

        x位置 += int(x)
        if x位置 < 0 { x位置=0 }
        if x位置 >= 80 { x位置 = 79 }

        y位置 -= int(y)

        if y位置 < 0 { y位置 = 0 }
        if y位置 >= 25 { y位置 = 24 }

        臨時 := " "
        マウス端末機.M出力(臨時, x以前位置, y以前位置)

        臨時 = "+"
        マウス端末機.M出力(臨時, x位置, y位置)

        x以前位置 = x位置
        y以前位置 = y位置
}

////////////////////////////////////////////////////////////////////////////////////////////
var 作業端末機 T端末機 = T端末機{}
func 作業A(){
	臨時 := "A"
	for i:=1; ; i++{
		作業端末機.M出力(臨時, i, 1)
	}
	
}
func 作業B(){
	臨時 := "B"
	for i:=0; ; i++{
		作業端末機.M出力(臨時, i, 1)
	}
}
func 作業C(){
	臨時 := "C"
	for i:=0; ; i++{
		作業端末機.M出力(臨時, i, 1)
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
var 機器記述子 T周辺部品連結装置の識別子
var i周辺部品連結制御器_處理器 I周辺部品連結制御器_處理器
type T私の周辺部品連結制御器_處理器 struct{
}
var 周辺部品端末機 T端末機 = T端末機{}
func (自身 T私の周辺部品連結制御器_處理器) M駆動装置を持つ同時(周辺部品連結装置の識別子 T周辺部品連結装置の識別子) {
        if 周辺部品連結装置の識別子.P売り手の識別子==0x1022 && 周辺部品連結装置の識別子.P装置_識別子==0x2000 {
                機器記述子 = 周辺部品連結装置の識別子
        }
}
func (自身 T私の周辺部品連結制御器_處理器) M駆動装置を取得する() T周辺部品連結装置の識別子{
        return 機器記述子
}
////////////////////////////////////////////////////////////////////////////////////////////
var 通信端末機 = T端末機{}
type T私のクライアント_伝送制御プロトコル_處理器 struct{
	Tクライアント_伝送制御プロトコル_處理器
}
func (自身 *T私のクライアント_伝送制御プロトコル_處理器)M連結成立同時(ソケット *T伝送制御プロトコル_ソケット){

	for i:=0; i<20; i++ {
		ソケット.M送信(([]byte)("Hello!! TCP"), 11) 
	}
	ソケット.M切断する()
}
func (自身 *T私のクライアント_伝送制御プロトコル_處理器)M資料を受信と同時(자료 []byte, 大きさ uint32){
}

type TWebサーバ_伝送制御プロトコル_處理器 struct{
	Tサーバ_伝送制御プロトコル_處理器
}
func (自身 *TWebサーバ_伝送制御プロトコル_處理器)M連結成立同時(ソケット *T伝送制御プロトコル_ソケット){


	var ハイパーテキスト文字列 = "HTTP/1.1 200 OK\r\nServer: MyWebServer\r\nContent-Type: text/html\r\n\r\n<html><head><title>hi</title><body>Noh によって作られた WEBサーバーです.</body></html>"
	var ハイパーテキスト転送プロトコル = *(*[]byte)(Pointer(&ハイパーテキスト文字列))
	ソケット.M送信(ハイパーテキスト転送プロトコル, uint16(len(ハイパーテキスト転送プロトコル)))

	ハイパーテキスト文字列 = "こんにちは!! TCP "
	ハイパーテキスト転送プロトコル = *(*[]byte)(Pointer(&ハイパーテキスト文字列))
	for i:=0; i<1000; i++ {
		ソケット.M送信(ハイパーテキスト転送プロトコル, uint16(len(ハイパーテキスト転送プロトコル)))
	}
	ソケット.M切断する()
}

////////////////////////////////////////////////////////////////////////////////////////////
func main(){

	大域記述子表 := &T大域記述子表{}
	大域記述子表.M初期化()

	
	作業a := T作業{}
	作業a.M初期化(大域記述子表, 作業A)
	作業b := T作業{}
	作業b.M初期化(大域記述子表, 作業B)
	作業c := T作業{}
	作業c.M初期化(大域記述子表, 作業C)

	
	作業管理者:= &T作業管理者{}
	作業管理者.M初期化()

	/*
	作業管理者.M作業追加(作業a)
	作業管理者.M作業追加(作業b)
	作業管理者.M作業追加(作業c)
	*/


	割り込み_管理者 := &T割り込み_管理者{}
	割り込み_管理者.M初期化(0x20, 大域記述子表, 作業管理者)

	キーボード := &Tキーボード_駆動装置{}
	キーボード事件處理器 := &T私のキーボード事件處理器{}
	キーボード.M初期化(割り込み_管理者, キーボード事件處理器)


	マウス:= &Tマウス_駆動装置{}
	マウス事件處理器 := &T私のマウス事件處理器{}
	マウス.M初期化(割り込み_管理者, マウス事件處理器)


	memoryManager := &TMemoryManager{}
	//var heap uint32 = 1024*1024
	memoryManager.Init(0, 1024*1024)
	//var allocated uint32 = uint32(uintptr(memoryManager.Malloc(1024)))


        駆動装置の管理者 := T駆動装置の管理者{} //DriverManager
        駆動装置の管理者.M初期化()

        周辺部品連結制御器 := &T周辺部品連結制御器{} // PCI
        私の周辺部品連結制御器_處理器:= T私の周辺部品連結制御器_處理器{}
        周辺部品連結制御器.M初期化(私の周辺部品連結制御器_處理器)
        周辺部品連結制御器.M駆動装置を選択(&駆動装置の管理者, 割り込み_管理者)
        機器記述子 = 私の周辺部品連結制御器_處理器.M駆動装置を取得する()


	インターネット住所_逆順 :=uint64(Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 52}))) // IP address
        ゲートウェイ住所_逆順 := Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 1})) 		// GatewayIP
        サブネットマスク_逆順 := Uint32_R(ArrayToUint32([4]byte{255, 255, 255, 0}))	// subnet mask
        遠隔住所_逆順 := Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 131}))		// Remote IP Address	
	var クライアントポート番号 uint16 = 1234 						// Port number
	var サーバポート番号 uint16 = 80						// Port number

	通信網の基板装置 := Tamd_am79c973{}						// Netcard

        イーサネットフレーム_提供者 := Tイーサネットフレーム_提供者{} 			// TEtherFrameProvider
        イーサネットフレーム_提供者.M初期化(通信網の基板装置)

        通信網の基板装置.M初期化(割り込み_管理者, 機器記述子, &イーサネットフレーム_提供者)
        通信網の基板装置.M論理住所を設定(インターネット住所_逆順)
        通信網の基板装置.M活性化()

        アドレス解決プロトコル_提供者:= Tアドレス解決プロトコル_提供者{}		// ARP(Address Resolution protocol)  Provider
        アドレス解決プロトコル_提供者.M初期化(イーサネットフレーム_提供者)
        アドレス解決プロトコル_提供者.M物理住所の放送(ゲートウェイ住所_逆順) 		// Address Resolution Protocol = ARP

        インターネットプロトコル_提供者 := Tインターネットプロトコル_提供者{}		// IP(Internet Protocol) Provider
        インターネットプロトコル_提供者.M初期化(イーサネットフレーム_提供者)
	インターネットプロトコル_提供者.M住所設定(アドレス解決プロトコル_提供者, ゲートウェイ住所_逆順, サブネットマスク_逆順)

        インターネット制御通知プロトコル := Tインターネット制御通知プロトコル{} 			// Internet Control Message Protocol = ICMP
        インターネット制御通知プロトコル.M初期化(インターネットプロトコル_提供者)
        インターネット制御通知プロトコル.M反響信号要求(ゲートウェイ住所_逆順)			// RequestEcho


        var ユーザデータグラムプロトコル_提供者 = Tユーザデータグラムプロトコル_提供者{}			// UserDatagramProtocol(UDP) Provider
        ユーザデータグラムプロトコル_提供者.M初期化(インターネットプロトコル_提供者)

        var ユーザデータグラムプロトコル_ソケット = *ユーザデータグラムプロトコル_提供者.M接続する(遠隔住所_逆順, クライアントポート番号) // udp sockect
        ユーザデータグラムプロトコル_ソケット.M初期化(ユーザデータグラムプロトコル_提供者)		// UserDatagramProtocol(UDP) Socket
	
        var ユーザデータグラムプロトコル_處理器 = Tユーザデータグラムプロトコル_處理器{} 			// UserDatagramProtocol(UDP) handler
        ユーザデータグラムプロトコル_處理器.M初期化(インターネットプロトコル_提供者)


	/*---------------------UDP を使用する場合は、このコードをアクティブにします --------------
        ユーザデータグラムプロトコル_ソケット.M送信(([]byte)("abcde:"),6)
        for {
                ユーザデータグラムプロトコル_ソケット.M送信(([]byte)("abcde:"),6)
        }
	------------------------------------------------------------------------------*/
	/*
	ユーザデータグラムプロトコル_提供者.M結合する(&ユーザデータグラムプロトコル_ソケット, &ユーザデータグラムプロトコル_處理器)
	for {
		var ユーザデータグラムプロトコル_ソケット_提供者 = *ユーザデータグラムプロトコル_提供者.M受信待ち(サーバポート番号)
        	ユーザデータグラムプロトコル_ソケット_提供者.M送信(([]byte)("abcde:"),6)
	}
	*/
	/*------------------------ グラフィックモードはここを活性化 ------------------------
	グラフィック := &T映像図形配列{}
	グラフィック.M動作状態_設定(320, 200, 8)
	グラフィック.M사각형채우기(0, 0, 320, 200, 0x00, 0x00, 0x00) 	// black rectangle

	ウィジェット := Tウィジェット{}
	ウィジェット.M初期化(nil, 0, 0, 20, 20, 0x00, 0x00, 0xA8) 	// blue rectangle

	ウィジェットマウス事件處理器 := &Tウィジェットマウス事件處理器{}
	ウィジェットマウス事件處理器.M初期化(ウィジェット, *グラフィック)
	マウス.M初期化(割り込み_管理者, ウィジェットマウス事件處理器)

	-------------------------------------------------------------------------------*/

	var 伝送制御プロトコル_提供者= T伝送制御プロトコル_提供者{}
	var 私のクライアント_伝送制御プロトコル_處理器 = T私のクライアント_伝送制御プロトコル_處理器{}
	伝送制御プロトコル_提供者.M初期化(インターネットプロトコル_提供者, &私のクライアント_伝送制御プロトコル_處理器)

	伝送制御プロトコル_提供者.M接続する(遠隔住所_逆順, クライアントポート番号)

	割り込み_管理者.M活性化()
	
	for i:=0; i<100000; i++{
		var 伝送制御プロトコル_ソケット = 伝送制御プロトコル_提供者.M受信待ち(サーバポート番号)
		var Webサーバ_伝送制御プロトコル_處理器 = TWebサーバ_伝送制御プロトコル_處理器{}
		伝送制御プロトコル_提供者.M結合する(伝送制御プロトコル_ソケット, &Webサーバ_伝送制御プロトコル_處理器)
	}

	for {
		とまり()
	}
	
}
func とまり()
