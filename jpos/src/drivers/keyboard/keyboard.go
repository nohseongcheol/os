package 자판

import . "unsafe"

import . "port"
import . "interrupt"

type Iキーボード事件處理器 interface{
	Mキーが押し下げられた時(値 byte)
	Mキーを離された時(値 byte)
}

type Tキーボード_駆動装置_データ struct{
	関数ポインター func(*Tキーボード_駆動装置, uint32) uint32

	データ入出力ポート 	Tバイト入出力ポート
	命令語入出力ポート 	Tバイト入出力ポート

	iキーボード事件處理器 Iキーボード事件處理器
}
var データ Tキーボード_駆動装置_データ

type Tキーボード_駆動装置 struct{
	*T割り込み_處理器
}

func (自身 *Tキーボード_駆動装置) M初期化(割り込み_管理者  *T割り込み_管理者, キーボード事件處理器 Iキーボード事件處理器) {


	データ.iキーボード事件處理器 = &T基本キーボード事件處理器{}
	if キーボード事件處理器 != nil {
		データ.iキーボード事件處理器 = キーボード事件處理器
	}
	
	データ.関数ポインター = (*Tキーボード_駆動装置).M割り込み処理
	var 住所 uintptr
	住所 = uintptr(Pointer(&データ.関数ポインター))


	自身.T割り込み_處理器.M初期化(0x21, uintptr(Pointer(割り込み_管理者)), 住所)

	for(データ.命令語入出力ポート.M読み取り() & 0x01) != 0 {
		データ.データ入出力ポート.M読み取り()
	}

	データ.データ入出力ポート.M初期化(0x60)
	データ.命令語入出力ポート.M初期化(0x64)


	データ.命令語入出力ポート.M作成(0xAE)
	データ.命令語入出力ポート.M作成(0x20)

	データ.命令語入出力ポート.M作成(0x60)

	var 状態 uint8
	状態 = uint8(データ.データ入出力ポート.M読み取り()) | 1 & (^0x10)
	データ.データ入出力ポート.M作成(状態)

	データ.データ入出力ポート.M作成(0xF4) 

}
func (自身 *Tキーボード_駆動装置) M割り込み処理(esp uint32) uint32{


	キーボード値 := データ.データ入出力ポート.M読み取り()

        if キーボード値 < 0x80 {

                switch キーボード値 {
                        case 0x02: データ.iキーボード事件處理器.Mキーが押し下げられた時('1')
                        case 0x03: データ.iキーボード事件處理器.Mキーが押し下げられた時('2')
                        case 0x04: データ.iキーボード事件處理器.Mキーが押し下げられた時('3')
                        case 0x05: データ.iキーボード事件處理器.Mキーが押し下げられた時('4')
                        case 0x06: データ.iキーボード事件處理器.Mキーが押し下げられた時('5')
                        case 0x07: データ.iキーボード事件處理器.Mキーが押し下げられた時('6')
                        case 0x08: データ.iキーボード事件處理器.Mキーが押し下げられた時('7')
                        case 0x09: データ.iキーボード事件處理器.Mキーが押し下げられた時('8')
                        case 0x0A: データ.iキーボード事件處理器.Mキーが押し下げられた時('9')
                        case 0x0B: データ.iキーボード事件處理器.Mキーが押し下げられた時('0')

                        case 0x10: データ.iキーボード事件處理器.Mキーが押し下げられた時('q')
                        case 0x11: データ.iキーボード事件處理器.Mキーが押し下げられた時('w')
                        case 0x12: データ.iキーボード事件處理器.Mキーが押し下げられた時('e')
                        case 0x13: データ.iキーボード事件處理器.Mキーが押し下げられた時('r')
                        case 0x14: データ.iキーボード事件處理器.Mキーが押し下げられた時('t')
                        case 0x15: データ.iキーボード事件處理器.Mキーが押し下げられた時('y')
                        case 0x16: データ.iキーボード事件處理器.Mキーが押し下げられた時('u')
                        case 0x17: データ.iキーボード事件處理器.Mキーが押し下げられた時('i')
                        case 0x18: データ.iキーボード事件處理器.Mキーが押し下げられた時('o')
                        case 0x19: データ.iキーボード事件處理器.Mキーが押し下げられた時('p')

                        case 0x1E: データ.iキーボード事件處理器.Mキーが押し下げられた時('a')
                        case 0x1F: データ.iキーボード事件處理器.Mキーが押し下げられた時('s')
                        case 0x20: データ.iキーボード事件處理器.Mキーが押し下げられた時('d')
                        case 0x21: データ.iキーボード事件處理器.Mキーが押し下げられた時('f')
                        case 0x22: データ.iキーボード事件處理器.Mキーが押し下げられた時('g')
                        case 0x23: データ.iキーボード事件處理器.Mキーが押し下げられた時('h')
                        case 0x24: データ.iキーボード事件處理器.Mキーが押し下げられた時('j')
                        case 0x25: データ.iキーボード事件處理器.Mキーが押し下げられた時('k')
                        case 0x26: データ.iキーボード事件處理器.Mキーが押し下げられた時('l')

                        case 0x2C: データ.iキーボード事件處理器.Mキーが押し下げられた時('y')
                        case 0x2D: データ.iキーボード事件處理器.Mキーが押し下げられた時('x')
                        case 0x2E: データ.iキーボード事件處理器.Mキーが押し下げられた時('c')
                        case 0x2F: データ.iキーボード事件處理器.Mキーが押し下げられた時('v')
                        case 0x30: データ.iキーボード事件處理器.Mキーが押し下げられた時('b')
                        case 0x31: データ.iキーボード事件處理器.Mキーが押し下げられた時('n')
                        case 0x32: データ.iキーボード事件處理器.Mキーが押し下げられた時('m')
                        case 0x33: データ.iキーボード事件處理器.Mキーが押し下げられた時(',')
                        case 0x34: データ.iキーボード事件處理器.Mキーが押し下げられた時('.')
                        case 0x35: データ.iキーボード事件處理器.Mキーが押し下げられた時('-')

                      	case 0x1C: データ.iキーボード事件處理器.Mキーが押し下げられた時('\n')
                        case 0x39: データ.iキーボード事件處理器.Mキーが押し下げられた時(' ')

                        case 0xFA:
                        case 0x45:
                        case 0xC5:

                        default: データ.iキーボード事件處理器.Mキーが押し下げられた時(' ')
                }

        }

	return esp

}

