/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package イーサネットフレーム

//import . "memorymanager"
import . "amd_am79c973"
import . "unsafe"
import . "util"


/////////////////////////////////////////////////////////////////////////////
//
//	イーサネットフレーム =  EthernetFrame
//	Media Access Control = _媒体アクセス制御_
//
/////////////////////////////////////////////////////////////////////////////
type Tイーサネットフレーム_ヘッダ_緩衝器 struct{
	宛先_媒体アクセス制御_住所_逆順 [6]byte		// destination mac address 
	送信元_媒体アクセス制御_住所_逆順 [6]byte		// source mac adddress
	イーサネット類型_逆順 [2]byte		// etherType
}
var イーサネットフレーム_ヘッダ_大きさ uint32 = 14
/////////////////////////////////////////////////////////////////////////////
type Tイーサネットフレーム_ヘッダ struct{		// EthernetFrame Header
	宛先_媒体アクセス制御_住所_逆順 uint64		// destination mac address
	送信元_媒体アクセス制御_住所_逆順 uint64		// source mac adddress
	イーサネット類型_逆順 uint16		// etherType
}
func (自身 *Tイーサネットフレーム_ヘッダ) M初期化(緩衝器 *Tイーサネットフレーム_ヘッダ_緩衝器) {
	自身.宛先_媒体アクセス制御_住所_逆順 = (ArrayToUint48(緩衝器.宛先_媒体アクセス制御_住所_逆順))
	自身.送信元_媒体アクセス制御_住所_逆順 = (ArrayToUint48(緩衝器.送信元_媒体アクセス制御_住所_逆順))
        自身.イーサネット類型_逆順 = (ArrayToUint16(緩衝器.イーサネット類型_逆順))
}
func (自身 *Tイーサネットフレーム_ヘッダ) 緩衝器_設定(緩衝器 *Tイーサネットフレーム_ヘッダ_緩衝器){
	緩衝器.宛先_媒体アクセス制御_住所_逆順 = Uint48ToArray(Uint48_R(自身.宛先_媒体アクセス制御_住所_逆順))
	緩衝器.送信元_媒体アクセス制御_住所_逆順 = Uint48ToArray(Uint48_R(自身.送信元_媒体アクセス制御_住所_逆順))
	緩衝器.イーサネット類型_逆順 = Uint16ToArray(Uint16_R(自身.イーサネット類型_逆順))
}
/////////////////////////////////////////////////////////////////////////////
type Iイーサネットフレーム_處理器 interface{
	Mイーサネットフレーム_受信と同時(資料住所 uintptr, 大きさ uint32) bool
	Mフレーム送信(宛先_媒体アクセス制御_住所_逆順 uint64, イーサネット類型_逆順 uint16, 資料住所 uintptr, 大きさ uint32) // Frame 보내기..
}
/////////////////////////////////////////////////////////////////////////////
type Tイーサネットフレーム_處理器_資料 struct{
	イーサネットフレーム_ヘッダ Tイーサネットフレーム_ヘッダ		// EthernetFrame header
	後端部 Tイーサネットフレーム_提供者				// EthernetFrame Provider
}
var 處理器_資料 Tイーサネットフレーム_處理器_資料

type Tイーサネットフレーム_處理器 struct{
}
func (自身 *Tイーサネットフレーム_處理器)M初期化(p_後端部 Tイーサネットフレーム_提供者){
	處理器_資料.後端部 = p_後端部
}
func (自身 *Tイーサネットフレーム_處理器) M處理器を設定(p_處理器 Iイーサネットフレーム_處理器, p_etherType uint16){
	資料.イーサネットフレーム_處理器[p_etherType] = p_處理器
}
func (自身 *Tイーサネットフレーム_處理器)Mイーサネットフレーム_受信と同時(資料住所 uintptr, 大きさ int32) bool{
	return false
}
func (自身 *Tイーサネットフレーム_處理器)Mフレーム送信(宛先_媒体アクセス制御_住所_逆順 uint64, イーサネット類型_逆順 uint16, 資料住所 uintptr, 大きさ uint32) {
	處理器_資料.後端部.Mフレーム送信(宛先_媒体アクセス制御_住所_逆順, イーサネット類型_逆順, 資料住所, 大きさ)	
}
func (自身 *Tイーサネットフレーム_處理器)M媒体住所を取得する() uint64{
	return 處理器_資料.後端部.M媒体住所を取得する()
}
func (自身 *Tイーサネットフレーム_處理器)Mアイピー住所を取得する() uint64{
	return 處理器_資料.後端部.Mアイピー住所を取得する()
}
/////////////////////////////////////////////////////////////////////////////
type イーサネットフレーム_提供者_資料 struct{
	ネットワークカード Tamd_am79c973
	イーサネットフレーム_處理器 [65565]Iイーサネットフレーム_處理器
}
var 資料 イーサネットフレーム_提供者_資料

type Tイーサネットフレーム_提供者 struct{
}
func (自身 *Tイーサネットフレーム_提供者)M初期化(p_後端部 Tamd_am79c973) {
	資料.ネットワークカード = p_後端部
	for i:=0; i<65535; i++ {
		資料.イーサネットフレーム_處理器[i] = nil
	}
}
func (自身 *Tイーサネットフレーム_提供者)M原始資料を受け取った同時(資料住所 uintptr, 大きさ uint32) bool{

	var 緩衝器 *Tイーサネットフレーム_ヘッダ_緩衝器 = (*Tイーサネットフレーム_ヘッダ_緩衝器)(Pointer(資料住所))
	var イーサネットフレーム_ヘッダ Tイーサネットフレーム_ヘッダ = Tイーサネットフレーム_ヘッダ{}
	イーサネットフレーム_ヘッダ.M初期化(緩衝器)
	var sendBack bool = false


	if イーサネットフレーム_ヘッダ.宛先_媒体アクセス制御_住所_逆順 == 0x0000FFFFFFFFFFFF || Uint48_R(イーサネットフレーム_ヘッダ.宛先_媒体アクセス制御_住所_逆順) == 自身.M媒体住所を取得する(){
		if 資料.イーサネットフレーム_處理器[イーサネットフレーム_ヘッダ.イーサネット類型_逆順] != nil {
			var 住所 uintptr = uintptr(Pointer(資料住所)) + uintptr(イーサネットフレーム_ヘッダ_大きさ)	
			sendBack = 資料.イーサネットフレーム_處理器[イーサネットフレーム_ヘッダ.イーサネット類型_逆順].Mイーサネットフレーム_受信と同時(住所, 大きさ - イーサネットフレーム_ヘッダ_大きさ)
		}
	}

	if sendBack {
		イーサネットフレーム_ヘッダ.宛先_媒体アクセス制御_住所_逆順 = イーサネットフレーム_ヘッダ.送信元_媒体アクセス制御_住所_逆順
		イーサネットフレーム_ヘッダ.送信元_媒体アクセス制御_住所_逆順 = Uint48_R(自身.M媒体住所を取得する())
		イーサネットフレーム_ヘッダ.緩衝器_設定(緩衝器)
	}

	return sendBack
}
func (自身 *Tイーサネットフレーム_提供者)M送信(資料住所 uintptr, 大きさ uint32){
	資料.ネットワークカード.M送信(資料住所, 大きさ)
}
func (自身 *Tイーサネットフレーム_提供者)Mフレーム送信(宛先_媒体アクセス制御_住所_逆順 uint64, イーサネット類型_逆順 uint16, 資料住所 uintptr, 大きさ uint32){

	var 緩衝器2 [4096]byte 
	var 緩衝器 *Tイーサネットフレーム_ヘッダ_緩衝器 = (*Tイーサネットフレーム_ヘッダ_緩衝器)(Pointer(&緩衝器2))

	var イーサネットフレーム_ヘッダ Tイーサネットフレーム_ヘッダ = Tイーサネットフレーム_ヘッダ{}
	イーサネットフレーム_ヘッダ.M初期化(緩衝器)

	イーサネットフレーム_ヘッダ.宛先_媒体アクセス制御_住所_逆順 = Uint48_R(宛先_媒体アクセス制御_住所_逆順)
	イーサネットフレーム_ヘッダ.送信元_媒体アクセス制御_住所_逆順 = Uint48_R(資料.ネットワークカード.M媒体住所を取得する())
	イーサネットフレーム_ヘッダ.イーサネット類型_逆順 = Uint16_R(イーサネット類型_逆順)

	イーサネットフレーム_ヘッダ.緩衝器_設定(緩衝器)
	var 原本資料 [4096] byte = *(*([4096]byte))(Pointer(資料住所))

	var i uint32 = 0
	for i=0; i<大きさ; i++ {
		緩衝器2[uint32(イーサネットフレーム_ヘッダ_大きさ)+i] = 原本資料[i]
	}

	var 住所 uintptr = uintptr(Pointer(&緩衝器2))

	資料.ネットワークカード.M送信(住所, 大きさ+uint32(イーサネットフレーム_ヘッダ_大きさ))
	
}
func (自身 *Tイーサネットフレーム_提供者)M媒体住所を取得する() uint64{
	return 資料.ネットワークカード.M媒体住所を取得する()
}
func (自身 *Tイーサネットフレーム_提供者)Mアイピー住所を取得する() uint64{
	return 資料.ネットワークカード.M論理住所を取得する()
}
