/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package main

import . "util"
import . "unsafe"

import . "gdt"
import . "interrupt"
import . "단말기"

import . "작업관리자"
import . "작업관리자/tss"
import . "작업관리자/thread"
import . "작업관리자/scheduler"

import . "시스템호출"
import . "구동장치들/장치제어기관리자"
import . "구동장치들/자판"
import . "구동장치들/마우스"

import . "구동장치들/고급기술결합"

import . "파일시스템/MSDOS파티션"
import . "파일시스템/fat"
import . "파일시스템/elf"

import . "기억공간관리자"

//import . "vga"			// 그래픽모드는 여기를 활성화
//import . "widget"			// 그래픽모드는 여기를 활성화

import . "pci"
import . "amd_am79c973"


import . "통신/신호통신망형태"		// etherframe = 이더넷프레임 = 신호통신망형태
import . "통신/주소결정규약" 		// AddressResolutionProtocol = ARP = 주소결정규약
import . "통신/상호통신망규약V4"		// InternetProtocol = 인터넷규약 = 상호통신망규약
import . "통신/상호통신망제어메시지규약" 	// InternetControlMessageProtocol = ICMP = 상호통신망제어메시지규약
import . "통신/사용자자료단위규약" 	// UserDatagramProtocol = UDP = 사용자자료단위규약
import . "통신/전송제어규약" 			// TansmissionControlProtocol= TCP = 전송제어규약

////////////////////////////////////////////////////////////////////////////////////////////
type T나의자판사건처리기 struct {
}

var 자판단말기 T단말기 = T단말기{}
func (자신 *T나의자판사건처리기) M키누른동시(값 byte){
        임시 := []byte(" ")
        임시[0] = 값

        자판단말기.M출력(임시)

}
func (자신 *T나의자판사건처리기) M키떼는동시(값 byte){
}



////////////////////////////////////////////////////////////////////////////////////////////
type T나의마우스사건처리기 struct{
}
var 마우스단말기 T단말기 = T단말기{}
var x이전위치 int = 0
var y이전위치 int = 0
var x위치 int = 0
var y위치 int = 0

func (자신 *T나의마우스사건처리기) M마우스누른동시(버튼 int8) {
        임시 := "x"
        마우스단말기.M출력(임시, x이전위치, y이전위치)
}
func (자신 *T나의마우스사건처리기) M마우스떼는동시(버튼 int8) { }
func (자신 *T나의마우스사건처리기) M마우스움직인동시(x int8, y int8) {

        x위치 += int(x)
        if x위치 < 0 { x위치=0 }
        if x위치 >= 80 { x위치 = 79 }

        y위치 -= int(y)

        if y위치 < 0 { y위치 = 0 }
        if y위치 >= 25 { y위치 = 24 }

        임시 := " "
        마우스단말기.M출력(임시, x이전위치, y이전위치)

        임시 = "+"
        마우스단말기.M출력(임시, x위치, y위치)

        x이전위치 = x위치
        y이전위치 = y위치
}

////////////////////////////////////////////////////////////////////////////////////////////
func sys출력(임시 string){
	var 주소 uint32 = uint32(uintptr(Pointer(&임시)))
	M시스템호출_개입중단(6, 주소, 1, 2, 3, 4)
}

var 작업단말기 T단말기 = T단말기{}
func 작업A(){
	임시 := "A1A2"
	for i:=1; ; i++{
		sys출력(임시)
	}
	
}
func 작업B(){
	임시 := "B1B2"
	for i:=0; ; i++{
		sys출력(임시)
	}
}
func 작업C(){
	임시 := "C1C2"
	for i:=0; ; i++{
		sys출력(임시)
	}
}
////////////////////////////////////////////////////////////////////////////////////////////
var 장비서술자 T주변부품연결장치_서술자
var i주변부품연결제어기_처리기 I주변부품연결제어기_처리기
type T나의주변부품연결제어처리기 struct{
}
var 주변부품단말기 T단말기 = T단말기{}
func (self T나의주변부품연결제어처리기) M구동장치_갖은동시(주변부품연결장치_서술자 T주변부품연결장치_서술자) {
        if 주변부품연결장치_서술자.P판매회사_식별자==0x1022 && 주변부품연결장치_서술자.P장치_식별자==0x2000 {
                장비서술자 = 주변부품연결장치_서술자
        }
}
func (self T나의주변부품연결제어처리기) M구동장치_갖기() T주변부품연결장치_서술자{
        return 장비서술자
}
////////////////////////////////////////////////////////////////////////////////////////////
var 통신단말기 = T단말기{}
type T나의_이용자_전송제어규약_처리기 struct{
	T이용자_전송제어규약_처리기
}
func (자신 *T나의_이용자_전송제어규약_처리기)M연결성립_동시(접속연결점 *T전송제어규약_접속연결점){

	for i:=0; i<20; i++ {
		접속연결점.M보내기(([]byte)("Hello!! TCP"), 11) 
	}
	접속연결점.M연결끊기()
}
func (자신 *T나의_이용자_전송제어규약_처리기)M자료받은동시(자료 []byte, 크기 uint32){
}

type T웹제공자_전송제어규약_처리기 struct{
	T제공자_전송제어규약_처리기
}
func (자신 *T웹제공자_전송제어규약_처리기)M연결성립_동시(접속연결점 *T전송제어규약_접속연결점){


	var 초본문전송규약_문자열 = "HTTP/1.1 200 OK\r\nServer: MyWebServer\r\nContent-Type: text/html\r\n\r\n<html><head><title>hi</title><body>NOH에 의해 만들어진 웹제공자 입니다.</body></html>"
	var 초본문전송규약 = *(*[]byte)(Pointer(&초본문전송규약_문자열))
	접속연결점.M보내기(초본문전송규약, uint16(len(초본문전송규약)))

	초본문전송규약_문자열 = "안녕!! TCP "
	초본문전송규약 = *(*[]byte)(Pointer(&초본문전송규약_문자열))
	for i:=0; i<10; i++ {
		접속연결점.M보내기(초본문전송규약, uint16(len(초본문전송규약)))
	}
	접속연결점.M연결끊기()
}

////////////////////////////////////////////////////////////////////////////////////////////
func getESP() uint32
func main(){

	공용서술자표 := &T공용서술자표{}
	공용서술자표.M초기화()

	
	기억공간관리자 := &T기억공간관리자{}
	기억공간관리자.M초기화(0, 16*1024*1024)
	var 할당주소 uint32 = uint32(uintptr(기억공간관리자.MM할당(1024*1024)))
	var 단말기 T단말기 = T단말기{}
	단말기.M출력("[heap:" ); 
	단말기.M출력(할당주소); 
	단말기.M출력("]" )
	
        할당됨 := uint32(uintptr(기억공간관리자.MM할당(1024)))
        단말기.MUint32출력XY(할당됨, 10, 15)

        esp := getESP()
        단말기.M출력XY(esp, 10, 5)
        tss := TSSEntry{}
        tss.Install(공용서술자표, 5, SEG_KERNEL_DATA, esp)
	

	/*
	작업a := T작업{}
	작업a.M초기화(공용서술자표, 기억공간관리자, 작업A)
	작업b := T작업{}
	작업b.M초기화(공용서술자표, 기억공간관리자, 작업B)
	작업c := T작업{}
	작업c.M초기화(공용서술자표, 기억공간관리자, 작업C)
	*/

	
	작업관리자 := &T작업관리자{}
	작업관리자.M초기화()

	/*
	작업관리자.M작업추가(작업a)
	작업관리자.M작업추가(작업b)
	작업관리자.M작업추가(작업c)
	*/


	개입중단_관리자 := &T개입중단_관리자{}
	개입중단_관리자.M초기화(0x20, 공용서술자표, 작업관리자)

	시스템호출 := &T시스템호출{}
	시스템호출.M초기화(개입중단_관리자)

	////////////////////////////////////////////////

        쓰레드_헬퍼 := &T쓰레드_헬퍼{}
        쓰레드_헬퍼.M초기화(기억공간관리자)
	쓰레드1 := 쓰레드_헬퍼.M함수로부터_생성(작업A, true)
	쓰레드2 := 쓰레드_헬퍼.M함수로부터_생성(작업B, true)

	스케줄러 := T스케줄러{}
        스케줄러.M초기화(개입중단_관리자, 기억공간관리자, tss)
	스케줄러.M쓰레드_추가(&쓰레드1)
	스케줄러.M쓰레드_추가(&쓰레드2)
        스케줄러.M활성화됨(true)


	////////////////////////////////////////////////



	자판 := &T자판_장치제어기{}
	자판사건처리기 := &T나의자판사건처리기{}
	자판.M초기화(개입중단_관리자, 자판사건처리기)


	마우스:= &T마우스_장치제어기{}
	마우스사건처리기 := &T나의마우스사건처리기{}
	마우스.M초기화(개입중단_관리자, 마우스사건처리기)



        장치제어기_관리자 := T장치제어기_관리자{} //DriverManager
        장치제어기_관리자.M초기화()

        주변부품연결제어기 := &T주변부품연결제어기{} // PCI
        나의주변부품연결제어처리기:= T나의주변부품연결제어처리기{}
        주변부품연결제어기.M초기화(나의주변부품연결제어처리기)
        주변부품연결제어기.M장치제어기들_선택(&장치제어기_관리자, 개입중단_관리자)
        장비서술자 = 나의주변부품연결제어처리기.M구동장치_갖기()


	고급기술결합 := T고급기술결합{}
	고급기술결합.MTest()

	msdos파티션 := TMSDOS파티션테이블{}
	msdos파티션.MTest()

	디렉토리 := T디렉토리엔트리FAT32{}
	디렉토리.MTest()

	elf := Elf{}
	elf.MTest()


	상호통신망규약주소_역순 :=uint64(Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 52}))) // IP address
        통신망관문_역순:= Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 129})) 		// GatewayIP
        부분통신망_영역숨김_역순 := Uint32_R(ArrayToUint32([4]byte{255, 255, 255, 0}))	// subnet mask
        원격주소_역순 := Uint32_R(ArrayToUint32([4]byte{192, 168, 22, 133}))		// Remote IP Address	
	var 이용자_입출구_번호 uint16 = 1234 						// Port number
	var 제공자_입출구_번호 uint16 = 80						// Port number

	통신망기판장치 := Tamd_am79c973{}						// Netcard

        신호통신망형태_제공자 := T신호통신망형태_제공자{} 				// TEtherFrameProvider
        신호통신망형태_제공자.M초기화(통신망기판장치)

        통신망기판장치.M초기화(개입중단_관리자, 장비서술자, &신호통신망형태_제공자)
        통신망기판장치.M논리주소_설정(상호통신망규약주소_역순)
        통신망기판장치.M활성화()

        주소결정규약_제공자 := T주소결정규약_제공자{}					// ARP(Address Resolution protocol)  Provider
        주소결정규약_제공자.M초기화(신호통신망형태_제공자)
        주소결정규약_제공자.M물리주소_방송(통신망관문_역순) 				// Address Resolution Protocol = ARP

        상호통신망규약_제공자 := T상호통신망규약_제공자{}				// IP(Internet Protocol) Provider
        상호통신망규약_제공자.M초기화(신호통신망형태_제공자)
	상호통신망규약_제공자.M주소설정(주소결정규약_제공자, 통신망관문_역순, 부분통신망_영역숨김_역순)

        상호통신망제어메시지규약 := T상호통신망제어메시지규약{} 			// Internet Control Message Protocol = ICMP
        상호통신망제어메시지규약.M초기화(상호통신망규약_제공자)
        상호통신망제어메시지규약.M반향응답_요청(통신망관문_역순)			// RequestEchoReply

        var 사용자자료단위규약_제공자 = T사용자자료단위규약_제공자{}			// UserDatagramProtocol(UDP) Provider
        사용자자료단위규약_제공자.M초기화(상호통신망규약_제공자)

        var 사용자자료단위규약_접속연결점 = *사용자자료단위규약_제공자.M연결하기(원격주소_역순, 이용자_입출구_번호) // udp sockect
        사용자자료단위규약_접속연결점.M초기화(사용자자료단위규약_제공자)		// UserDatagramProtocol(UDP) Socket
	
        var 사용자자료단위규약_처리기 = T사용자자료단위규약_처리기{} 			// UserDatagramProtocol(UDP) handler
        사용자자료단위규약_처리기.M초기화(상호통신망규약_제공자)

	/*---------------------사용자 자료단위 규약(UDP)는 여기를 활성화 --------------
        사용자자료단위규약_접속연결점.M보내기(([]byte)("abcde:"),6)
        for {
                사용자자료단위규약_접속연결점.M보내기(([]byte)("abcde:"),6)
        }
	------------------------------------------------------------------------------*/
	/*
	사용자자료단위규약_제공자.M결합하기(&사용자자료단위규약_접속연결점, &사용자자료단위규약_처리기)
	for {
		var 사용자자료단위규약_접속연결점_제공자 = *사용자자료단위규약_제공자.M신호수신대기(제공자_입출구_번호)
        	사용자자료단위규약_접속연결점_제공자.M보내기(([]byte)("abcde:"),6)
	}
	*/
	/*------------------------ 그래픽 모드는 여기를 활성화 ------------------------
	그래픽 := &T영상도형배열{}
	그래픽.M동작상태_설정(320, 200, 8)
	그래픽.M사각형채우기(0, 0, 320, 200, 0x00, 0x00, 0x00) // 검정색 채우기

	위젯 := T위젯{}
	위젯.M초기화(nil, 0, 0, 20, 20, 0x00, 0x00, 0xA8) // 파란색 상자

	위젯마우스사건처리기 := &T위젯마우스사건처리기{}
	위젯마우스사건처리기.M초기화(위젯, *그래픽)
	마우스.M초기화(개입중단_관리자, 위젯마우스사건처리기)

	-------------------------------------------------------------------------------*/

	var 전송제어규약_제공자 = T전송제어규약_제공자{}				// TCP(Transmission Control Protocol) Provider
	var 나의_이용자_전송제어규약_처리기 = T나의_이용자_전송제어규약_처리기{}	// Client Handler	
	전송제어규약_제공자.M초기화(상호통신망규약_제공자, &나의_이용자_전송제어규약_처리기)

	전송제어규약_제공자.M연결하기(원격주소_역순, 이용자_입출구_번호)		// TCP Connect
	개입중단_관리자.M활성화()
	for i:=0; i<100000; i++{
		var 전송제어규약_접속연결점 = 전송제어규약_제공자.M수신대기(제공자_입출구_번호)	// TCPSocket listen
		var 웹제공자_전송제어규약_처리기 = T웹제공자_전송제어규약_처리기{}		// WebServer Handler
		전송제어규약_제공자.M결합하기(전송제어규약_접속연결점, &웹제공자_전송제어규약_처리기)	// TCP Provider Bind
	}
	for {
		멈추기()
	}
	
}
func 멈추기()
