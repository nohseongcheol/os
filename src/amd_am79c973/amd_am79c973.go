/*
	Copyright 2020. (노성철, nsch78@nate.com, nsch@naver.com) All right reserved
*/
package amd_am79c973

import . "unsafe"
import . "util"
import . "interrupt"
import . "단말기"
import . "port"
import . "pci"

////////////////////////////////////////////////////////////////////////////////////////
//
//		Register = 기록회로
//
////////////////////////////////////////////////////////////////////////////////////////
var 넷카드단말기 T단말기= T단말기{}
type T초기화구역 struct{
	방식 uint16
	보낸_임시저장공간_갯수 uint8 // 4bit reserved1, 4bit numM보내기Buffers
	받은_임시저장공간_갯수 uint8 // 4bit reserved2, 4bit 받은_임시저장공간_갯수
	물리주소 uint64
	논리주소 uint64
	받은_임시저장공간서술자_주소 uintptr
	보낸_임시저장공간서술자_주소 uintptr
}
type T임시저장공간_서술자 struct{
	주소 uint32
	표시들 uint32
	표시들2 uint32
	활성여부 uint32
}

type I원시자료_처리기 interface{
	M원시자료_받은동시(자료주소 uintptr, 크기 uint32) bool
	M보내기(자료주소 uintptr, 크기 uint32)
}

var 원시자료_후단부 Tamd_am79c973
type T원시자료_처리기 struct{
}
func (자신 *T원시자료_처리기) M후단부_설정(후단부 Tamd_am79c973){
	원시자료_후단부 = 후단부
}
func (자신 *T원시자료_처리기) M후단부_갖기() Tamd_am79c973{
	return 원시자료_후단부
}
func (자신 *T원시자료_처리기) M원시자료_받은동시(자료주소 uintptr, 크기 uint32) bool{
	return true
}

func (자신 *T원시자료_처리기) M보내기(자료주소 uintptr, 크기 uint32) {
	원시자료_후단부.M보내기(자료주소 , 크기)
}

// wiki.osdev.org/AMD_PCNET
var 매체주소_0_입출력단자 T워드입출력단자 		// MAC0Port
var 매체주소_2_입출력단자 T워드입출력단자 		//
var 매체주소_4_입출력단자 T워드입출력단자
var 기록회로자료_입출력단자 T워드입출력단자		// registerDataPort(RDP) for CSR(Control and Status register)
var 기록회로주소_입출력단자 T워드입출력단자		// registerAddressPort(RAP) for CSR
var 재설정_입출력단자 T워드입출력단자			// resetPort
var 공용전송회로제어기_기록회로자료_입출력단자 T워드입출력단자		// busControlRegisterDataPort(BDP)

var 초기화구역 T초기화구역

var 보낼_임시저장공간_서술자 [8]T임시저장공간_서술자		// send buffer descriptor 
var 보낼_임시저장공간들_서술자_주기억공간 [2048+15] byte
var 보낼_임시저장공간들 [2*1024+15][8] uint8
var 현재_보낼임시저장공간_번호 uint8

var 받은_임시저장공간_서술자 [8]T임시저장공간_서술자		//received buffer descriptor
var 받은_임시저장공간들_서술자_주기억공간 [2048+15] uint8	// received buffers descriptor memrory
var 받은_임시저장공간들[2*1024+15][8] uint8
var 현재_받은임시저장공간_번호 uint8
var 함수변수 func(*Tamd_am79c973, uint32) uint32

type Tamd_am79c973 struct {
	T개입중단_처리기
	주변부품연결장치_서술자 T주변부품연결장치_서술자	
	개입중단_관리자 *T개입중단_관리자
	원시자료_처리기 *T원시자료_처리기
}
var 단말기 T단말기 = T단말기{}
var i원시자료_처리기 I원시자료_처리기 
func (자신 *Tamd_am79c973) M초기화(개입중단_관리자 *T개입중단_관리자, 
					주변부품연결장치_서술자 T주변부품연결장치_서술자, 
					원시자료_처리기 I원시자료_처리기) {
	
	자신.주변부품연결장치_서술자 = 주변부품연결장치_서술자
	

        함수변수 = (*Tamd_am79c973).개입중단_처리하기
        var 함수변수_주소 uintptr
        함수변수_주소 = uintptr(Pointer(&함수변수))


	자신.T개입중단_처리기.M초기화(uint8(0x20+주변부품연결장치_서술자.P개입중단), uintptr(Pointer(개입중단_관리자)), 함수변수_주소)

	매체주소_0_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준))
	매체주소_2_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x02)
	매체주소_4_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x04)
	기록회로자료_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x10)
	기록회로주소_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x12)
	재설정_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x14)
	공용전송회로제어기_기록회로자료_입출력단자.M초기화(uint16(주변부품연결장치_서술자.P입출력단자기준) + 0x16)


	i원시자료_처리기 = &T원시자료_처리기{}	
	if 원시자료_처리기 != nil {
		i원시자료_처리기 = 원시자료_처리기
	}

	현재_보낼임시저장공간_번호 = 0
	현재_받은임시저장공간_번호 = 0

	var 매체0 uint64 =  uint64(매체주소_0_입출력단자.M읽기()%256)
	var 매체1 uint64 =  uint64(매체주소_0_입출력단자.M읽기()/256)
	var 매체2 uint64 =  uint64(매체주소_2_입출력단자.M읽기()%256)	
	var 매체3 uint64 =  uint64(매체주소_2_입출력단자.M읽기()/256)	
	var 매체4 uint64 =  uint64(매체주소_4_입출력단자.M읽기()%256)	
	var 매체5 uint64 =  uint64(매체주소_4_입출력단자.M읽기()/256)	

	var 매체주소 uint64 = (매체5 << 40) | (매체4 << 32) | (매체3 << 24) | (매체2 << 16) | (매체1 << 8) | 매체0
	
	단말기.M출력("[interrupt num : ", 0, 13)
	단말기.M출력(uint8(주변부품연결장치_서술자.P개입중단))
	단말기.M출력("]")
	단말기.M출력("[MAC : ")
	단말기.MUint48출력(Uint48_R(매체주소))
	단말기.M출력("]")


	기록회로주소_입출력단자.M쓰기(20)
	공용전송회로제어기_기록회로자료_입출력단자.M쓰기(0x102)

	기록회로주소_입출력단자.M쓰기(0)
	기록회로자료_입출력단자.M쓰기(0x04)

	초기화구역.방식 = 0x0000
	초기화구역.보낸_임시저장공간_갯수 = 3
	초기화구역.받은_임시저장공간_갯수 = 3

	초기화구역.물리주소 = 매체주소

	초기화구역.논리주소 = 0

	보낼_임시저장공간_서술자 = *(*([8]T임시저장공간_서술자))(Pointer((uintptr((Pointer)(&보낼_임시저장공간들_서술자_주기억공간))+15) & ^(uintptr)(0xF)))
	초기화구역.보낸_임시저장공간서술자_주소 = uintptr(Pointer(&보낼_임시저장공간_서술자))
	받은_임시저장공간_서술자 = *(*([8]T임시저장공간_서술자))(Pointer((uintptr((Pointer)(&받은_임시저장공간들_서술자_주기억공간))+15) & ^(uintptr)(0xF)))
	초기화구역.받은_임시저장공간서술자_주소 = uintptr(Pointer(&받은_임시저장공간_서술자))

	

	for i:=0; i<8; i++ {
		보낼_임시저장공간_서술자[i].주소 = uint32((uintptr(Pointer(&보낼_임시저장공간들[i])) + 15) & ^(uintptr(0xF))) 
		보낼_임시저장공간_서술자[i].표시들 = 0x7FF | 0xF000
		보낼_임시저장공간_서술자[i].표시들2 = 0
		보낼_임시저장공간_서술자[i].활성여부 = 0

		받은_임시저장공간_서술자[i].주소 = uint32((uintptr(Pointer(&받은_임시저장공간들[i])) + 15) & ^(uintptr(0xF)))
		받은_임시저장공간_서술자[i].표시들 = 0xF7FF | 0x80000000
	
	}

	기록회로주소_입출력단자.M쓰기(1)
	기록회로자료_입출력단자.M쓰기(uint16(uintptr(Pointer(&초기화구역))  & 0xFFFF ))

	기록회로주소_입출력단자.M쓰기(2)
	기록회로자료_입출력단자.M쓰기(uint16((uintptr(Pointer(&초기화구역)) >> 16) & 0xFFFF))

}
func (자신 *Tamd_am79c973) M활성화(){
        기록회로주소_입출력단자.M쓰기(0)
        기록회로자료_입출력단자.M쓰기(0x41)

        기록회로주소_입출력단자.M쓰기(4)
        임시 := 기록회로자료_입출력단자.M읽기()
	기록회로주소_입출력단자.M쓰기(4)
	기록회로자료_입출력단자.M쓰기(임시 | 0xC00)

	기록회로주소_입출력단자.M쓰기(0)
	기록회로자료_입출력단자.M쓰기(0x42)

}
func (자신 *Tamd_am79c973) M재설정() int{
	재설정_입출력단자.M읽기()	
	재설정_입출력단자.M쓰기(0)
	return 10
}
func (자신 *Tamd_am79c973) 개입중단_처리하기(esp uint32) uint32{

	기록회로주소_입출력단자.M쓰기(0)
	임시 := uint32(기록회로자료_입출력단자.M읽기())
	/*
	임시 := uint32(기록회로자료_입출력단자.M접속번호())
	단말기.M출력("esp(")
	단말기.M출력(esp)
	단말기.M출력(":")
	단말기.M출력(임시)
	단말기.M출력(":")
	단말기.MUint16출력(count)
	count++
	단말기.M출력(")")
	*/

	if (임시 & 0x8000) == 0x8000 {
		단말기.M출력("am79c973 error")
	}
	if (임시 & 0x2000) == 0x2000 {
		단말기.M출력("am79c973 collision error")
	}
	if (임시 & 0x1000) == 0x1000 {
		단말기.M출력("am79c973 missed frame")
	}
	if (임시 & 0x0800) == 0x0800 {
		단말기.M출력("am79c973 memory error")
	}
	if (임시 & 0x0400) == 0x0400 {
		//단말기.M출력("am79c973 data received")
		자신.M받기()
	}
	if (임시 & 0x0200) == 0x0200 {
		//단말기.M출력("am79c973 data sent")
	}

	// ack	
	기록회로주소_입출력단자.M쓰기(0)
	기록회로자료_입출력단자.M쓰기(uint16(임시))

	if (임시 & 0x0100) == 0x0100 {
		단말기.M출력("[netcard(am79c973) init done]")
	}
	return esp
}

func (자신 *Tamd_am79c973) M보내기(자료주소 uintptr, 크기 uint32){
	var 보낼_임시저장공간_번호 uint16 = uint16(현재_보낼임시저장공간_번호)
	현재_보낼임시저장공간_번호 = 0
	if(크기 > 1518) {
		크기 = 1518
	}
	
	var 원본자료 [4096] byte = *(*([4096]byte))(Pointer(자료주소))
	var 복사위치 uint32=보낼_임시저장공간_서술자[보낼_임시저장공간_번호].주소 + 크기 -1
	for i:=0; i<int(크기); i++{
		*(*byte)(Pointer(uintptr(복사위치))) = 원본자료[int(크기)-i-1]
		복사위치--
	}


	var 자료 [4096] byte = *(*([4096]byte))(Pointer(자료주소))
	단말기.M출력("send packet", 0, 2)
	for i:=0; i<64; i++{
		단말기.MHex출력(자료[i])
		단말기.M출력(":")
	}
	단말기.M출력("\n")


	보낼_임시저장공간_서술자[보낼_임시저장공간_번호].활성여부 = 0
	보낼_임시저장공간_서술자[보낼_임시저장공간_번호].표시들2 = 0
	보낼_임시저장공간_서술자[보낼_임시저장공간_번호].표시들 = 0x8300F000 | uint32((-크기) & 0xFFF)
	

	기록회로주소_입출력단자.M쓰기(0)
	기록회로자료_입출력단자.M쓰기(0x48)
}
func (자신 *Tamd_am79c973) M받기(){

	현재_받은임시저장공간_번호 = 0

	for ; (받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들 & 0x80000000)==0; 현재_받은임시저장공간_번호=(현재_받은임시저장공간_번호+1)%8 {
		if !(받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들 & 0x40000000 != 0) &&
		   ((받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들 & 0x03000000) == 0x03000000) {

			var 크기 uint32 = 받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들 & 0xFFF
			if 크기 > 64 { // remove checksum
				크기 -= 4
			}

			var 임시저장공간 [4096]byte= *(*([4096]byte))(Pointer(uintptr(받은_임시저장공간_서술자[현재_받은임시저장공간_번호].주소)))
			var 주소 uintptr = uintptr(Pointer(&임시저장공간))
			if i원시자료_처리기 != nil {
				if i원시자료_처리기.M원시자료_받은동시(주소, 크기) {
					var 주소 uintptr = uintptr(Pointer(&임시저장공간))
					자신.M보내기(주소, 크기)
				}
			}

			var 자료[4096] byte = *(*([4096]byte))(Pointer(&임시저장공간))
			단말기.M출력("recv packet", 0, 6)
			for i:=0; i<64; i++{
				단말기.MHex출력(자료[i])
				단말기.M출력(":")
			}
			단말기.M출력("\n")

		}
		받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들2=0
		받은_임시저장공간_서술자[현재_받은임시저장공간_번호].표시들=0x8000F7FF 
	}
}
func (자신 *Tamd_am79c973)M처리기_설정(원시자료_처리기 *T원시자료_처리기){
	자신.원시자료_처리기 = 원시자료_처리기
}
func (자신 *Tamd_am79c973)M매체주소_갖기() uint64{
	return 초기화구역.물리주소
}
func (자신 *Tamd_am79c973)M논리주소_설정(논리주소 uint64){
	초기화구역.논리주소 = 논리주소
}
func (자신 *Tamd_am79c973)M논리주소_갖기() uint64{
	return 초기화구역.논리주소
}
