package gdt

import "unsafe"

func gdt_func(x uintptr)
/*
type TSegmentElement struct{
	 binary[8] uint8 // limit_lo(2byte), base_lo(2byte), base_hi(1byte), seg_type(1byte), flags_limit_hi(1byte), base_vhi(1byte)
}
//Seg := TSegmentDescriptorBinary{}

type TSegmentBlock struct{
	nullSegmentSelector TSegmentDescriptor
	unusedSegmentSelector TSegmentDescriptor
	codeSegmentSelector TSegmentDescriptor
	dataSegmentSelector TSegmentDescriptor
} */
type TSegmentDescriptor struct{
/*
	//segData [8]uint8
	plimit_lo *uint16 // 2
	pbase_lo *uint16 // 2
	pbase_hi *uint8 //1
	pseg_type *uint8 //1
	pflags_limit_hi *uint8 //1
	pbase_vhi *uint8 //1

	limit_lo uint16 // 2
	base_lo uint16 // 2
	base_hi uint8 //1
	seg_type uint8 //1
	flags_limit_hi uint8 //1
	base_vhi uint8 //1 
*/
}
func (self *TSegmentDescriptor) Init(segData [40]uint8, index uint8, base uint32, limit uint32, flags uint8) {

	// [8] uint8{0, 0, 0, 0, 0, 0, 0, 0}
	/*	
	self.plimit_lo = (*uint16)(unsafe.Pointer(&self.segData[0]))
	self.pbase_lo = (*uint16)(unsafe.Pointer(&self.segData[2]))
	self.pbase_hi = (*uint8)(unsafe.Pointer(&self.segData[4]))
	self.pseg_type = (*uint8)(unsafe.Pointer(&self.segData[5]))
	self.pflags_limit_hi = (*uint8)(unsafe.Pointer(&self.segData[6]))
	self.pbase_vhi = (*uint8)(unsafe.Pointer(&self.segData[7])) 
	*/

	//target := ([8] uint8)(&segments[index])


	if(limit <= 65536) {
		segments[index+6] = 0x40
	} else {
		if((limit & 0xFFF) != 0xFFF){
			limit = (limit >> 12) -1
		}else{
			limit = limit >> 12
		}
		//self.flags_limit_hi = 0xC0
		//*self.pflags_limit_hi = 0xC0
		segments[index+6] = 0xC0
	}

	//segments := *((*[]uint8)(unsafe.Pointer(self)))

	segments[index+0] = uint8(limit & 0xFF)
	segments[index+1] = uint8((limit >> 8) & 0xFF)
	segments[index+6] = segments[index+6] | uint8((limit >> 16) & 0xF) //G, D, 0, AVL, segment
	
	segments[index+2] = uint8(base & 0xFF)
	segments[index+3] = uint8((base >> 8) & 0xFF) 
	segments[index+4] = uint8((base >> 16) & 0xFF)
	segments[index+7] = uint8((base >> 24) & 0xFF)

	segments[index+5] = flags  // p, DPL, S, Type(4)

	/*
	target := ([8] uint8)(&segData[index])


	if(limit <= 65536) {
		//*self.pflags_limit_hi = 0x40
		target[6] = 0x40
	} else {
		if((limit & 0xFFF) != 0xFFF){
			limit = (limit >> 12) -1
		}else{
			limit = limit >> 12
		}
		//self.flags_limit_hi = 0xC0
		//*self.pflags_limit_hi = 0xC0
		target[6] = 0xC0
	}

	//target := *((*[]uint8)(unsafe.Pointer(self)))

	target[0] = uint8(limit & 0xFF)
	target[1] = uint8((limit >> 8) & 0xFF)
	target[6] |= uint8((limit >> 16) & 0xF)
	
	target[2] = uint8(base & 0xFF)
	target[3] = uint8((base >> 8) & 0xFF) 
	target[4] = uint8((base >> 16) & 0xFF)
	target[7] = uint8((base >> 24) & 0xFF)

	target[5] = flags  */
	
}
/*
func (self *TSegmentDescriptor) Base() uint32{
	//target :=*((*[]uint8)(unsafe.Pointer(self)))	
	target := ([8] uint8)(self.segData)
	result := uint32(target[7])

	result = (result << 8) + uint32(target[4]);
	result = (result << 8) + uint32(target[3]);
	result = (result << 8) + uint32(target[2]);

	return result
}
func (self *TSegmentDescriptor) Limit() uint32{
	//target := *((*[]uint8)(unsafe.Pointer(self)))
	target := ([8] uint8)(self.segData)
	result := uint32(target[6] & 0xF)

	result = (result << 8) + uint32(target[1]) 
	result = (result << 8) + uint32(target[0])

	if((target[6] & 0xC0) == 0xC0){
		result = (result << 12) | 0xFFF
	}

	return result
}
*/
type T공용서술자표 struct{
	segSelector TSegmentDescriptor
	/*
	nullSegmentSelector TSegmentDescriptor //*4
	unusedSegmentSelector TSegmentDescriptor
	codeSegmentSelector TSegmentDescriptor
	dataSegmentSelector TSegmentDescriptor
	*/
	segments [32] uint8
}
var segments [40] uint8
/*
func (self *T공용서술자표) Test(){
} */
func (self *T공용서술자표) M초기화(){
	segments = [40]uint8 {0, 0, 0, 0, 0, 0, 0, 0, 
			 	   0, 0, 0, 0, 0, 0, 0, 0,
			 	   0, 0, 0, 0, 0, 0, 0, 0, 
			 	   0, 0, 0, 0, 0, 0, 0, 0}


	self.segSelector.Init(segments, 0, 0, 0, 0) // null Segment
	//self.segSelector.Init(segments, 8, 0, 0, 0) // unused Segment
	//self.segSelector.Init(segments, 0, 0, 1024*1024, 0x9A) // unused Segment
	//self.segSelector.Init(segments, 8, 0, 1024*1024, 0x92) // unused Segment
	//self.segSelector.Init(segments, 8, 0, 64*1024*1024, 0x9A) // code Segment
	self.segSelector.Init(segments, 8, 0, 64*1024*1024, 0x9A) // code Segment
	self.segSelector.Init(segments, 16, 0, 64*1024*1024, 0x92) // code Segment
	//self.segSelector.Init(segments, 24, 0, 64*1024*1024, 0xFA) // data segment
	//self.segSelector.Init(segments, 32, 0, 64*1024*1024, 0xF2) // data segment
	
	
	/*

	self.segSelector[0].Init(0,0,0)
	self.segSelector[1].Init(0,0,0)
	self.segSelector[2].Init(0,64*1024*1024,0x9A)
	self.segSelector[3].Init(0,64*1024*1024,0x92) */

	/*	
	self.nullSegmentSelector = TSegmentDescriptor{}
	self.nullSegmentSelector.Init(0, 0, 0)   
	self.unusedSegmentSelector = TSegmentDescriptor{}
	self.unusedSegmentSelector.Init(0, 0, 0)
	self.codeSegmentSelector = TSegmentDescriptor{}
	self.codeSegmentSelector.Init(0, 64*1024*1024, 0x9A)
	self.dataSegmentSelector = TSegmentDescriptor{}
	self.dataSegmentSelector.Init(0, 64*1024*1024, 0x92)
	*/
	
	target := [6]uint8{0,0,0,0,0,0}
	base_addr := (*uint32)(unsafe.Pointer(&target[2]))
	(*base_addr) = uint32(uintptr(unsafe.Pointer(&segments)))
	//(*base_addr) = (*uint32)(unsafe.Pointer(&segments)))
	//*base_addr = tmp
	//*base_addr = 0xFF
	
	size := (*uint16)(unsafe.Pointer(&target[0]))
	(*size) = (uint16)((unsafe.Sizeof(segments)))
	//*size = (uint32)(unsafe.Sizeof(*self))
	//*size = 32

	gdt_func(uintptr(unsafe.Pointer(&target)))

	/*
	target := [2]uint32{0, 0}
	target[1] = uint32(uintptr(unsafe.Pointer(&self.segments)))
	target[0] = (uint32)(unsafe.Sizeof(*self) << 16)
	
	gdt_func(uintptr(unsafe.Pointer(&target))+2) */



	//target_array := ([64]uint8)(uintptr(unsafe.Pointer(&target)))
	//gdt_func(uintptr(unsafe.Pointer(([64]uint8)(unsafe.Pointer(&target)))))
	//i[1] = (uint32) self
	//i[0] = sizeof(T공용서술자표) << 16
	
}
func (self *T공용서술자표) CodeSegmentSelector() uint16{
	// return (uint8_t *)&codeSegmentSelector - (uint8_t *) this;
	return uint16( uintptr(unsafe.Pointer(&segments[8])) - uintptr(unsafe.Pointer(&segments[0])))
	//return uint16(uintptr(unsafe.Pointer(&segments[16])))
}
func (self *T공용서술자표) DataSegmentSelector() uint16{
	// return (uint8_t *)&dataSegmentSelector - (uint8_t *) this;
	return *(*uint16)(unsafe.Pointer(&self.segments[16])) - *(*uint16)(unsafe.Pointer(&self.segments[0]))
	
}
