package 작업관리자

import . "unsafe"
import  . "reflect"
import . "gdt"
//import . "memorymanager"
//import . "util"
import . "단말기"

type T중앙처리장치_상태 struct{
	확장누산기_기록회로 uint32 			// Extended Accumulator Register (EAX)
	확장기준주소_기록회로 uint32 			// Extended Base Addre스택영역 Register(EBX)
	확장횟수지정_기록회로 uint32 			// Extended Counter Register(ECX)
	확장자료_기록회로 uint32 			// Extended Data Register (EDX)

	확장출발지주소_기록회로 uint32			// Extended Source Index(ESI)
	확장목적지주소_기록회로 uint32			// Extended Destination Index(EDI)

	확장스택기준점_지시자 uint32			// Extended Base Pointer Register(ebp)

	확장명령어_지시자 uint32			// Extend Instruction Pointer(eip)

	
	코드영역 uint32					// Code Segment
	eflags uint32

	error uint32

	확장스택_지시자 uint32
	스택영역 uint32
}
type T작업 struct{
	중앙처리장치_상태 *T중앙처리장치_상태
}
var 스택 [256][4096] byte
var 작업번호 uint8=0
var 함수주소[256] func ()
func (자신 *T작업) M초기화(gdt *T공용서술자표, 진입점 func()){
	
	자신.중앙처리장치_상태 = (*T중앙처리장치_상태)(Pointer(uintptr(Pointer(&스택[작업번호])) + 4096 - Sizeof(T중앙처리장치_상태{})))
	//자신.중앙처리장치_상태 = (*T중앙처리장치_상태)(Pointer(uintptr(Pointer(&스택[작업번호][0])) + 4096 - Sizeof(T중앙처리장치_상태{})))
	//자신.중앙처리장치_상태 = (*T중앙처리장치_상태)(Pointer(&(스택[작업번호][4096 - Sizeof(T중앙처리장치_상태{}))-100])))
	//var memoryManager = &TMemoryManager{}
	//var 스택 = *(*[]byte)(memoryManager.Malloc(4096))
	//--자신.중앙처리장치_상태 = (*T중앙처리장치_상태)(Pointer(&(스택[작업번호][4096 - Sizeof(T중앙처리장치_상태{})-100])))

	함수주소[작업번호] = 진입점

	자신.중앙처리장치_상태.확장누산기_기록회로 = 0
	자신.중앙처리장치_상태.확장기준주소_기록회로 = 0
	자신.중앙처리장치_상태.확장횟수지정_기록회로 = 0
	자신.중앙처리장치_상태.확장자료_기록회로 = 0


	자신.중앙처리장치_상태.확장출발지주소_기록회로 = 0
	자신.중앙처리장치_상태.확장목적지주소_기록회로 = 0
	자신.중앙처리장치_상태.확장스택기준점_지시자 = 0


	//var 주소 = uint32(ValueOf(함수주소[작업번호]).Pointer())
	//자신.중앙처리장치_상태.확장명령어_지시자 = uint32(uintptr(Pointer(&함수주소[작업번호])))
	//자신.중앙처리장치_상태.확장명령어_지시자 = uint32(uintptr(Pointer(&주소)))
	자신.중앙처리장치_상태.확장명령어_지시자 = uint32(ValueOf(함수주소[작업번호]).Pointer())
	//자신.중앙처리장치_상태.확장명령어_지시자 = uint32(ValueOf(진입점).Pointer())
	자신.중앙처리장치_상태.코드영역 = uint32(gdt.M코드조각선택자())
	자신.중앙처리장치_상태.eflags = 0x202
	//자신.중앙처리장치_상태.eflags = 0x0

	자신.중앙처리장치_상태.확장스택_지시자 = 0
	자신.중앙처리장치_상태.스택영역 = 0

	var data = *(*[52]byte)(Pointer(자신.중앙처리장치_상태))
	단말기.M출력XY("cpu1 state [ ", 2, 15)
	//단말기.M출력(uint32(uintptr(Pointer(자신.중앙처리장치_상태))))
	단말기.M출력(":")
	for i:=0; i<48; i++{
		단말기.M출력(data[i])
	}


	작업번호++
}
type T작업관리자 struct{
}
var 작업들 [256] T작업
var 작업갯수 int
var 현재작업 int
func (자신 * T작업관리자) M초기화() {
	작업갯수 = 0
	현재작업 = -1 
}

func (자신 *T작업관리자) M작업추가(작업 T작업) bool {
	if(작업갯수 >= 255){
		return false
	}
	작업들[작업갯수] = 작업
	작업갯수++
	return true
}
var 단말기 = T단말기{}
var 이전상태 *T중앙처리장치_상태
var i int=0
func (자신 *T작업관리자) M작업일정(중앙처리장치_상태 *T중앙처리장치_상태) *T중앙처리장치_상태{


	/*	
	var data1 = *(*[48]byte)(Pointer(중앙처리장치_상태))	
	단말기.M출력XY("cpu3 state [ ", 2, 20)
	//단말기.M출력(개입중단)
	//단말기.M출력(uint32(uintptr(Pointer(중앙처리장치_상태))))
	단말기.M출력(":")
	for i:=0; i<48; i++{
		단말기.M출력(data1[i])
	}
	
 */
	if i >=4 {
		i++
		return 이전상태
	}else if i==0 {
		이전상태 = 중앙처리장치_상태
	}
	i++
	if 작업갯수 <= 0 {
		return 중앙처리장치_상태
	}

	if 현재작업 >= 0 {
		작업들[현재작업].중앙처리장치_상태 = 중앙처리장치_상태
	}
	
	현재작업++
	if 현재작업 >= 작업갯수 {
		현재작업 = 현재작업 % 작업갯수
		/*
		작업들[현재작업].중앙처리장치_상태.확장누산기_기록회로 = 중앙처리장치_상태.확장누산기_기록회로
		작업들[현재작업].중앙처리장치_상태.확장횟수지정_기록회로 = 중앙처리장치_상태.확장횟수지정_기록회로
		작업들[현재작업].중앙처리장치_상태.확장스택_지시자 = 중앙처리장치_상태.확장스택_지시자
		작업들[현재작업].중앙처리장치_상태.확장스택기준점_지시자 = 중앙처리장치_상태.확장스택_지시자
		*/
	}

	/*
	//중앙처리장치_상태.확장명령어_지시자 = 작업들[현재작업].중앙처리장치_상태.확장명령어_지시자
	//작업들[현재작업].중앙처리장치_상태.확장명령어_지시자 =  중앙처리장치_상태.확장명령어_지시자
	작업들[현재작업].중앙처리장치_상태.확장누산기_기록회로 = 중앙처리장치_상태.확장누산기_기록회로 		// EAX
	작업들[현재작업].중앙처리장치_상태.확장기준주소_기록회로 = 중앙처리장치_상태.확장기준주소_기록회로 	// EBX
	작업들[현재작업].중앙처리장치_상태.확장횟수지정_기록회로 = 중앙처리장치_상태.확장횟수지정_기록회로	// ECX
	작업들[현재작업].중앙처리장치_상태.확장자료_기록회로 = 중앙처리장치_상태.확장자료_기록회로		// EDX

	작업들[현재작업].중앙처리장치_상태.확장출발지주소_기록회로 = 중앙처리장치_상태.확장출발지주소_기록회로	// ESI
	작업들[현재작업].중앙처리장치_상태.확장목적지주소_기록회로 = 중앙처리장치_상태.확장목적지주소_기록회로	// EDI
	작업들[현재작업].중앙처리장치_상태.확장스택기준점_지시자 = 중앙처리장치_상태.확장스택기준점_지시자	// EBP
	//작업들[현재작업].중앙처리장치_상태.확장스택기준점_지시자 = uint32(uintptr(Pointer(작업들[현재작업].중앙처리장치_상태)))	// EBP
	//작업들[현재작업].중앙처리장치_상태.확장스택_지시자 = uint32(uintptr(Pointer(작업들[현재작업].중앙처리장치_상태)))	// EBP

	//자신.중앙처리장치_상태.확장명령어_지시자 = uint32(ValueOf(진입점).Pointer())
	작업들[현재작업].중앙처리장치_상태.확장명령어_지시자 = 중앙처리장치_상태.확장명령어_지시자	// EIP
	작업들[현재작업].중앙처리장치_상태.코드영역 = 중앙처리장치_상태.코드영역			// CS
	작업들[현재작업].중앙처리장치_상태.eflags = 중앙처리장치_상태.eflags				// eflags

	//자신.중앙처리장치_상태.확장스택_지시자 = 0
	//자신.중앙처리장치_상태.스택영역 = 0
	작업들[현재작업].중앙처리장치_상태.error = 중앙처리장치_상태.error

	//작업들[현재작업].중앙처리장치_상태.확장스택_지시자 = 중앙처리장치_상태.확장스택_지시자
	작업들[현재작업].중앙처리장치_상태.스택영역 = 중앙처리장치_상태.스택영역

	//var data2 = *(*[48]byte)(Pointer(작업들[현재작업].중앙처리장치_상태))	
	//var data2 = *(*[48]byte)(Pointer(중앙처리장치_상태))	
	//중앙처리장치_상태.확장명령어_지시자 = 작업들[현재작업].중앙처리장치_상태.확장명령어_지시자
	//var func_addr =  (작업들[현재작업].중앙처리장치_상태.확장명령어_지시자)
	*/

	//중앙처리장치_상태.확장명령어_지시자 = 작업들[현재작업].중앙처리장치_상태.확장명령어_지시자

	/*
	단말기.M출력XY("cpu2 state [ ", 2, 17)
	var data2 = *(*[48]byte)(Pointer(작업들[현재작업].중앙처리장치_상태))	
	//var data2 = *(*[48]byte)(Pointer(중앙처리장치_상태))	
	//단말기.M출력(uint32(ValueOf(작업들[현재작업].중앙처리장치_상태).Pointer()))
	단말기.M출력(":")
	for i:=0; i<48; i++{
		단말기.M출력(data2[i])
	}*/
	//사용자함수 := (*(*func())(Pointer(uintptr(작업들[현재작업].중앙처리장치_상태.확장명령어_지시자))))
	//사용자함수()
	return 중앙처리장치_상태
	//return 작업들[현재작업].중앙처리장치_상태
}
