package 사용자자료단위규약

import . "unsafe"
import . "단말기"
import . "util"
import . "memorymanager"
import . "통신/상호통신망규약V4"


///////////////////////////////////////////////////////////////////////////
var 단말기 = T단말기{}
///////////////////////////////////////////////////////////////////////////
//
//		사용자자료단위규약 = UserDatagram Protocol = UDP
//		입출구 = Port
//		사용자자료단위규약_접속연결점 = UserDatagramProtocolSocket = UDPSocket
//		신호수신대기 = listen
///////////////////////////////////////////////////////////////////////////
type T사용자자료단위규약_머리말_임시저장공간 struct{
	출발지입출구번호 [2]byte	// source port number
	목적지입출구번호 [2]byte	// destination port number

	길이 [2]byte			// length
	검사합 [2]byte			// checksum
}
var 사용자규약_머리글_크기 uint32 = 8
type T사용자자료단위규약_머리말 struct{
	출발지입출구번호 uint16		// source port number
	목적지입출구번호 uint16		// destination port number

	길이 uint16			// length
	검사합 uint16			// checksum
}
func (자신 *T사용자자료단위규약_머리말) M초기화(임시저장공간 *T사용자자료단위규약_머리말_임시저장공간){
	자신.출발지입출구번호 = ArrayToUint16(임시저장공간.출발지입출구번호)
	자신.목적지입출구번호 = ArrayToUint16(임시저장공간.목적지입출구번호)
	
	자신.길이 = ArrayToUint16(임시저장공간.길이)
	자신.검사합 = ArrayToUint16(임시저장공간.검사합)
}
func (자신 *T사용자자료단위규약_머리말) 임시저장공간_설정(임시저장공간 *T사용자자료단위규약_머리말_임시저장공간){

	임시저장공간.출발지입출구번호 = Uint16ToArray(자신.출발지입출구번호)
	임시저장공간.목적지입출구번호 = Uint16ToArray(자신.목적지입출구번호)

	임시저장공간.길이 = Uint16ToArray(자신.길이)
	임시저장공간.검사합 = Uint16ToArray(자신.검사합)

}

///////////////////////////////////////////////////////////////////////////
type I사용자자료단위규약_처리기 interface{
	사용자자료단위규약_메시지_처리하기(접속연결점 *T사용자자료단위규약_접속연결점, data uintptr, 크기 uint16)
}
///////////////////////////////////////////////////////////////////////////
type T사용자자료단위규약_처리기 struct{
}
func (자신 *T사용자자료단위규약_처리기) M초기화(backend T상호통신망규약_제공자) {
}
func (자신 *T사용자자료단위규약_처리기) 사용자자료단위규약_메시지_처리하기(접속연결점 *T사용자자료단위규약_접속연결점, data uintptr, 크기 uint16){
}

///////////////////////////////////////////////////////////////////////////
type I사용자자료단위규약_접속연결점 interface{
	사용자자료단위규약_메시지_처리하기(data uintptr, 크기 uint16)
}
type T사용자자료단위규약_접속연결점 struct{
	원격입출구번호 uint16
	원격IP주소 uint32
	자신입출구번호 uint16
	자신IP주소 uint32

	신호수신대기중 bool
}
var 사용자자료단위규약_제공자 T사용자자료단위규약_제공자
var 사용자자료단위규약_처리기 I사용자자료단위규약_처리기
func (자신 *T사용자자료단위규약_접속연결점) M초기화(p_사용자자료단위규약_제공자 T사용자자료단위규약_제공자, p_사용자자료단위규약_처리기 I사용자자료단위규약_처리기){

	사용자자료단위규약_제공자 = p_사용자자료단위규약_제공자
	if 사용자자료단위규약_처리기 == nil  && p_사용자자료단위규약_처리기 != nil{
		사용자자료단위규약_처리기 = p_사용자자료단위규약_처리기
	}
	자신.신호수신대기중 = false
}
func (자신 *T사용자자료단위규약_접속연결점) 사용자자료단위규약_메시지_처리하기(data uintptr, 크기 uint16){

	if 사용자자료단위규약_처리기 != nil {
		사용자자료단위규약_처리기.사용자자료단위규약_메시지_처리하기(자신, data, 크기)
	}	
}
func (자신 *T사용자자료단위규약_접속연결점) M보내기(p_자료 []byte, 크기 uint16){
	var 임시저장공간 [4096] byte
	for i:=0; i<int(크기); i++ {
		임시저장공간[i] = p_자료[i]
	}
	var data = uintptr(Pointer(&임시저장공간))
	사용자자료단위규약_제공자.M보내기(자신, data, 크기)
}
func (자신 *T사용자자료단위규약_접속연결점) M연결끊기(){
	사용자자료단위규약_제공자.M연결끊기(자신)
}
///////////////////////////////////////////////////////////////////////////
type T사용자자료단위규약_제공자 struct{
}
var 상호통신망규약_처리기 I상호통신망규약_처리기
var 접속연결점들 [65535] T사용자자료단위규약_접속연결점
var 접속연결점들_갯수 int
var 여유입출구번호 uint16 // freePort

func (자신 *T사용자자료단위규약_제공자) M초기화(p_ipProvider T상호통신망규약_제공자, p_상호통신망규약_처리기 I상호통신망규약_처리기){
	상호통신망규약_처리기 = p_상호통신망규약_처리기
	상호통신망규약_처리기.M초기화(p_ipProvider, p_상호통신망규약_처리기, 0x11)
	접속연결점들_갯수 = 0
	여유입출구번호 = 1024
}
func (자신 *T사용자자료단위규약_제공자) M상호통신망규약_받은동시(srcIP_BE uint32, dstIP_BE uint32, internetprotocolPayload uintptr, 크기 uint32) bool{
	if 크기 < 사용자규약_머리글_크기 {
		return false
	}
	
	var 임시저장공간 *T사용자자료단위규약_머리말_임시저장공간 = (*T사용자자료단위규약_머리말_임시저장공간)(Pointer(internetprotocolPayload))
	var 머리말 T사용자자료단위규약_머리말
	머리말.M초기화(임시저장공간)


	var 접속연결점 *T사용자자료단위규약_접속연결점 = nil
	
	for i:=0; i<접속연결점들_갯수 && 접속연결점==nil; i++ {

		if 접속연결점들[i].자신입출구번호 == 머리말.목적지입출구번호 && 
		   접속연결점들[i].자신IP주소 == dstIP_BE && 
		   접속연결점들[i].신호수신대기중 == true 	{

			접속연결점 = &접속연결점들[i]
			접속연결점.신호수신대기중 = false
			접속연결점.원격입출구번호 = 머리말.출발지입출구번호
			접속연결점.원격IP주소 = srcIP_BE

		}else if 접속연결점들[i].자신입출구번호 == 머리말.목적지입출구번호 && 
		  접속연결점들[i].자신IP주소 == dstIP_BE && 
		  접속연결점들[i].원격입출구번호 == 머리말.출발지입출구번호 && 
		  접속연결점들[i].원격IP주소 == srcIP_BE	{

			접속연결점 = &접속연결점들[i]
	
		}
	}
	
	머리말.임시저장공간_설정(임시저장공간)
	if 접속연결점 != nil {
		접속연결점.사용자자료단위규약_메시지_처리하기(internetprotocolPayload + uintptr(사용자규약_머리글_크기), uint16(크기 - 사용자규약_머리글_크기))
	}

	return false
}

func (자신 *T사용자자료단위규약_제공자) M연결하기(상호통신망_주소 uint32, 입출구번호 uint16) *T사용자자료단위규약_접속연결점{
	var memoryManager = &TMemoryManager{}
	var 접속연결점 = (*T사용자자료단위규약_접속연결점)(memoryManager.Malloc(50))

	if 접속연결점 != nil {
		
		접속연결점.M초기화(*자신, nil)
		접속연결점.원격입출구번호 = 입출구번호
		접속연결점.원격IP주소 = 상호통신망_주소
		접속연결점.자신입출구번호 = 여유입출구번호 
		여유입출구번호++
		접속연결점.자신IP주소 = uint32((*상호통신망규약_처리기.M제공자_갖기()).M상호통신망주소_갖기())

		접속연결점.원격입출구번호 = Uint16_R(접속연결점.원격입출구번호)
		접속연결점.자신입출구번호 = Uint16_R(접속연결점.자신입출구번호)
		
		접속연결점들[접속연결점들_갯수] = *접속연결점
		접속연결점들_갯수++

	}
	return 접속연결점
	
}
func (자신 *T사용자자료단위규약_제공자) 신호수신대기(port uint16) *T사용자자료단위규약_접속연결점{
	var 접속연결점 = &T사용자자료단위규약_접속연결점{}
	접속연결점 = nil
	if 접속연결점 != nil {
		접속연결점.M초기화(*자신, nil)
		접속연결점.신호수신대기중 = true
		접속연결점.자신입출구번호 = port
		접속연결점.자신IP주소 = uint32((*상호통신망규약_처리기.M제공자_갖기()).M상호통신망주소_갖기())

		접속연결점.자신입출구번호 = Uint16_R(접속연결점.자신입출구번호)
	}
	return 접속연결점
}
func (자신 *T사용자자료단위규약_제공자) M연결끊기(접속연결점 *T사용자자료단위규약_접속연결점){
	for i:=0; i<접속연결점들_갯수 && 접속연결점==nil; i++ {
		if 접속연결점들[i] == *접속연결점 {
			접속연결점들_갯수--
			접속연결점들[i] = 접속연결점들[접속연결점들_갯수]
			break
		}
	}
}
func (자신 *T사용자자료단위규약_제공자) M보내기(접속연결점 *T사용자자료단위규약_접속연결점, p_자료 uintptr, 크기 uint16){
	var 전체길이 = uint32(크기) + 사용자규약_머리글_크기
	
	var 임시저장공간 [4096]byte
	var 머리말_임시저장공간 = (*T사용자자료단위규약_머리말_임시저장공간)(Pointer(&임시저장공간))
	
	var 머리말 = T사용자자료단위규약_머리말{}

	머리말.출발지입출구번호 = 접속연결점.자신입출구번호
	머리말.목적지입출구번호 = 접속연결점.원격입출구번호
	머리말.길이 = Uint16_R(uint16(전체길이))

	머리말.검사합 = 0x0
	머리말.임시저장공간_설정(머리말_임시저장공간)

	var dataBytes [4096]byte = *(*[4096]byte)(Pointer(p_자료))
	for i:=0; i<int(크기); i++ {
		임시저장공간[int(사용자규약_머리글_크기)+i] = dataBytes[i]
	}

	var 자료주소 uintptr = uintptr(Pointer(&임시저장공간))
	

	상호통신망규약_처리기.M보내기(접속연결점.원격IP주소, 0x11, 자료주소, 전체길이)
	
}
func (자신 *T사용자자료단위규약_제공자) Bind(접속연결점 *T사용자자료단위규약_접속연결점, 처리기 *T사용자자료단위규약_처리기){
}
