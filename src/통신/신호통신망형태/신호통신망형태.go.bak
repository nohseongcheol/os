package 신호통신망형태

import . "단말기"
//import . "memorymanager"
import . "amd_am79c973"
import . "unsafe"
import . "util"


var 신호통신단말기 T단말기 = T단말기{}
/////////////////////////////////////////////////////////////////////////////
//
//	신호통신망형태 = 신호통신프레임 = EthernetFrame
//	매체접근제어 = Media Access Control = MAC
//	물리주소 = 매체주소= MAC address
//
/////////////////////////////////////////////////////////////////////////////
type T신호통신망형태_머리말_임시저장공간 struct{
	목적지_매체주소_역순 [6]byte		// destination mac address 
	출발지_매체주소_역순 [6]byte		// source mac adddress
	신호통신유형_역순 [2]byte		// etherType
}
var 신호통신망형태_머리말_크기 int = 14
/////////////////////////////////////////////////////////////////////////////
type T신호통신망형태_머리말 struct{		// EthernetFrame Header
	목적지_매체주소_역순 uint64		// destination mac address
	출발지_매체주소_역순 uint64		// source mac adddress
	신호통신유형_역순 uint16		// etherType
}
func (자신 *T신호통신망형태_머리말) M초기화(임시저장공간 *T신호통신망형태_머리말_임시저장공간) {
	자신.목적지_매체주소_역순 = (ArrayToUint48(임시저장공간.목적지_매체주소_역순))
	자신.출발지_매체주소_역순 = (ArrayToUint48(임시저장공간.출발지_매체주소_역순))
        자신.신호통신유형_역순 = (ArrayToUint16(임시저장공간.신호통신유형_역순))
}
func (자신 *T신호통신망형태_머리말) 임시저장공간_설정(임시저장공간 *T신호통신망형태_머리말_임시저장공간){
	임시저장공간.목적지_매체주소_역순 = Uint48ToArray(Uint48_R(자신.목적지_매체주소_역순))
	임시저장공간.출발지_매체주소_역순 = Uint48ToArray(Uint48_R(자신.출발지_매체주소_역순))
	임시저장공간.신호통신유형_역순 = Uint16ToArray(Uint16_R(자신.신호통신유형_역순))
}
/////////////////////////////////////////////////////////////////////////////
type I신호통신망형태_처리기 interface{
	M초기화(p_후단부 T신호통신망형태_제공자)
	M처리기설정(처리기 I신호통신망형태_처리기, etherType uint16)
	M신호통신망형태_받는동시(자료주소 uintptr, 크기 int) bool
	M보내기(목적지_매체주소_역순 uint64, 자료주소 uintptr, 크기 uint32)
	M신호보내기(목적지_매체주소_역순 uint64, 신호통신유형_역순 uint16, 자료주소 uintptr, 크기 uint32)
	M제공자_갖기() T신호통신망형태_제공자
	M매체주소_갖기() uint64
	M상호통신망주소_갖기() uint64
}

/////////////////////////////////////////////////////////////////////////////
type T신호통신망형태_처리기 struct{
}
var 신호통신망형태_머리말 T신호통신망형태_머리말		// EthernetFrame header
var 후단부 T신호통신망형태_제공자				// EthernetFrame Provider
var 신호통신망형태_처리기들 [65535]I신호통신망형태_처리기	// EthernetFrame Handlers
var 신호통신망형태_처리기 *T신호통신망형태_처리기 = nil		// EthernetFrame Handler

func (자신 *T신호통신망형태_처리기)M초기화(p_후단부 T신호통신망형태_제공자){
	후단부 = p_후단부
}

func (자신 *T신호통신망형태_처리기) M처리기설정(p_처리기 I신호통신망형태_처리기, p_etherType uint16){
	신호통신망형태_처리기들[p_etherType] = p_처리기
}
func (자신 *T신호통신망형태_처리기) M후단부_설정(p_후단부 T신호통신망형태_제공자){
	후단부 = p_후단부
}
func (자신 *T신호통신망형태_처리기) M후단부_갖기() T신호통신망형태_제공자{
	return 후단부
}
func (자신 *T신호통신망형태_처리기)M신호통신망형태_받는동시(자료주소 uintptr, 크기 int) bool{
	신호통신단말기.M출력("OnEtherFrameReceived")
	return false
}
func (자신 *T신호통신망형태_처리기)M보내기(목적지_매체주소_역순 uint64, 자료주소 uintptr, 크기 uint32) {
	후단부.M신호보내기(목적지_매체주소_역순, 신호통신망형태_머리말.신호통신유형_역순, 자료주소, 크기)
}
func (자신 *T신호통신망형태_처리기)M신호보내기(목적지_매체주소_역순 uint64, 신호통신유형_역순 uint16, 자료주소 uintptr, 크기 uint32) {
	후단부.M신호보내기(목적지_매체주소_역순, 신호통신유형_역순, 자료주소, 크기)	
}
func (자신 *T신호통신망형태_처리기)M매체주소_갖기() uint64{
	return 후단부.M매체주소_갖기()
}
func (자신 *T신호통신망형태_처리기)M상호통신망주소_갖기() uint64{
	return 후단부.M상호통신망주소_갖기()
}
func (자신 *T신호통신망형태_처리기)M제공자_갖기() T신호통신망형태_제공자 {
	return 후단부
}
/////////////////////////////////////////////////////////////////////////////
type T신호통신망형태_원시자료_처리기 struct{
	T원시자료_처리기
}
var 신호통신망형태_제공자 T신호통신망형태_제공자

func (자신 *T신호통신망형태_원시자료_처리기)M초기화(p_신호통신망형태_제공자 T신호통신망형태_제공자, p_후단부 Tamd_am79c973){
	신호통신망형태_제공자 = p_신호통신망형태_제공자
	신호통신망형태_제공자.M초기화(p_후단부)
}
func (자신 *T신호통신망형태_원시자료_처리기)M원시자료_받은동시(자료주소 uintptr, 크기 int) bool {
	return 신호통신망형태_제공자.M원시자료_받은동시(자료주소, 크기)
}
func (자신 *T신호통신망형태_원시자료_처리기)M보내기(자료주소 uintptr, 크기 uint32){
	신호통신망형태_제공자.M보내기(자료주소, 크기)
}
func (자신 *T신호통신망형태_원시자료_처리기)M매체주소_갖기()uint64{
	return 신호통신망형태_제공자.M매체주소_갖기()
}
func (자신 *T신호통신망형태_원시자료_처리기)M상호통신망주소_갖기()uint64{
	return 신호통신망형태_제공자.M상호통신망주소_갖기()
}
func (자신 *T신호통신망형태_원시자료_처리기)M제공자_갖기() T신호통신망형태_제공자{
	return 신호통신망형태_제공자
}
/////////////////////////////////////////////////////////////////////////////
type 신호통신망형태_제공자_자료 struct{
	넷카드 Tamd_am79c973
	신호통신망형태_처리기들 [65565]I신호통신망형태_처리기
}
var 자료 신호통신망형태_제공자_자료

type T신호통신망형태_제공자 struct{
	넷카드 Tamd_am79c973
	신호통신망형태_처리기들 [65565]I신호통신망형태_처리기
}
func (자신 *T신호통신망형태_제공자)M초기화(p_후단부 Tamd_am79c973) {
	자신.넷카드 = p_후단부
	for i:=0; i<65535; i++ {
		신호통신망형태_처리기들[i] = nil
		자신.신호통신망형태_처리기들[i] = nil
	}
}
func (자신 *T신호통신망형태_제공자)M원시자료_받은동시(자료주소 uintptr, 크기 int) bool{

	var 임시저장공간 *T신호통신망형태_머리말_임시저장공간 = (*T신호통신망형태_머리말_임시저장공간)(Pointer(자료주소))
	var 신호통신망형태_머리말 T신호통신망형태_머리말 = T신호통신망형태_머리말{}
	신호통신망형태_머리말.M초기화(임시저장공간)
	var sendBack bool = false


	if  신호통신망형태_머리말.목적지_매체주소_역순 == 0x0000FFFFFFFFFFFF  || Uint48_R(신호통신망형태_머리말.목적지_매체주소_역순) == 자신.M매체주소_갖기(){
		if 신호통신망형태_처리기들[신호통신망형태_머리말.신호통신유형_역순] != nil {
			var 주소 uintptr = uintptr(Pointer(자료주소)) + uintptr(신호통신망형태_머리말_크기)	
			sendBack = 신호통신망형태_처리기들[신호통신망형태_머리말.신호통신유형_역순].M신호통신망형태_받는동시(주소, 크기 - 신호통신망형태_머리말_크기)
		}
	}

	if sendBack {
		신호통신망형태_머리말.목적지_매체주소_역순 = 신호통신망형태_머리말.출발지_매체주소_역순
		신호통신망형태_머리말.출발지_매체주소_역순 = Uint48_R(자신.M매체주소_갖기())
		신호통신망형태_머리말.임시저장공간_설정(임시저장공간)
	}

	return sendBack
}
func (자신 *T신호통신망형태_제공자)M보내기(자료주소 uintptr, size uint32){
	자신.넷카드.M보내기(자료주소, size)	
}
func (자신 *T신호통신망형태_제공자)M신호보내기(목적지_매체주소_역순 uint64, 신호통신유형_역순 uint16, 자료주소 uintptr, 크기 uint32){

	var 임시저장공간2 [4096]byte 
	var 임시저장공간 *T신호통신망형태_머리말_임시저장공간 = (*T신호통신망형태_머리말_임시저장공간)(Pointer(&임시저장공간2))

	var 신호통신망형태_머리말 T신호통신망형태_머리말 = T신호통신망형태_머리말{}
	신호통신망형태_머리말.M초기화(임시저장공간)

	신호통신망형태_머리말.목적지_매체주소_역순 = Uint48_R(목적지_매체주소_역순)
	신호통신망형태_머리말.출발지_매체주소_역순 = Uint48_R(자신.넷카드.M매체주소_갖기())
	신호통신망형태_머리말.신호통신유형_역순 = Uint16_R(신호통신유형_역순)

	신호통신망형태_머리말.임시저장공간_설정(임시저장공간)
	var 원본자료 [4096] byte = *(*([4096]byte))(Pointer(자료주소))

	var i uint32 = 0
	for i=0; i<크기; i++ {
		임시저장공간2[uint32(신호통신망형태_머리말_크기)+i] = 원본자료[i]
	}

	var 주소 uintptr = uintptr(Pointer(&임시저장공간2))

	자신.넷카드.M보내기(주소, 크기+uint32(신호통신망형태_머리말_크기))
	
}
func (자신 *T신호통신망형태_제공자)M매체주소_갖기() uint64{
	return 자신.넷카드.M매체주소_갖기()
}
func (자신 *T신호통신망형태_제공자)M상호통신망주소_갖기() uint64{
	return 자신.넷카드.M논리주소_갖기()
}
